[
  {
    "rank": 1,
    "tid": "T1059",
    "name": "Command and Scripting Interpreter",
    "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of <a href=\"https://attack.mitre.org/techniques/T1059/004\">Unix Shell</a> while Windows installations include the <a href=\"https://attack.mitre.org/techniques/T1059/003\">Windows Command Shell</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.\nThere are also cross-platform interpreters such as <a href=\"https://attack.mitre.org/techniques/T1059/006\">Python</a>, as well as those commonly associated with client applications such as <a href=\"https://attack.mitre.org/techniques/T1059/007\">JavaScript</a> and <a href=\"https://attack.mitre.org/techniques/T1059/005\">Visual Basic</a>.\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in <a href=\"https://attack.mitre.org/tactics/TA0001\">Initial Access</a> payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a> in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
    "url": "https://attack.mitre.org/techniques/T1059",
    "detection": "Command-line and scripting activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools. Also monitor for loading of modules associated with specific languages.\nIf scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
    "score": 2.9571428571428573,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1021",
        "name": "Restrict Web-Based Content",
        "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
        "url": "https://attack.mitre.org/mitigations/M1021"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
        "url": "https://attack.mitre.org/mitigations/M1040"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      },
      {
        "mid": "M1045",
        "name": "Code Signing",
        "description": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
        "url": "https://attack.mitre.org/mitigations/M1045"
      },
      {
        "mid": "M1049",
        "name": "Antivirus/Antimalware",
        "description": "Use signatures or heuristics to detect malicious software.",
        "url": "https://attack.mitre.org/mitigations/M1049"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1059.004",
        "name": "Command and Scripting Interpreter: Unix Shell",
        "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell) Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with <a href=\"https://attack.mitre.org/techniques/T1021/004\">SSH</a>. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.",
        "url": "https://attack.mitre.org/techniques/T1059/004",
        "detection": "Unix shell usage may be common on administrator, developer, or power user systems, depending on job function. If scripting is restricted for normal users, then any attempt to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information discovery, collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script. ",
        "mitigations": [
          {
            "mid": "M1038",
            "name": "Execution Prevention",
            "description": "Block execution of code on a system through application control, and/or script blocking.",
            "url": "https://attack.mitre.org/mitigations/M1038"
          }
        ]
      },
      {
        "tid": "T1059.005",
        "name": "Command and Scripting Interpreter: Visual Basic",
        "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> and the <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a> through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of <a href=\"https://attack.mitre.org/techniques/T1059/007\">JavaScript</a> on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into <a href=\"https://attack.mitre.org/techniques/T1566/001\">Spearphishing Attachment</a> payloads.",
        "url": "https://attack.mitre.org/techniques/T1059/005",
        "detection": "Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information <a href=\"https://attack.mitre.org/tactics/TA0007\">Discovery</a>, <a href=\"https://attack.mitre.org/tactics/TA0009\">Collection</a>, or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.\nUnderstanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.",
        "mitigations": [
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1038",
            "name": "Execution Prevention",
            "description": "Block execution of code on a system through application control, and/or script blocking.",
            "url": "https://attack.mitre.org/mitigations/M1038"
          },
          {
            "mid": "M1040",
            "name": "Behavior Prevention on Endpoint",
            "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
            "url": "https://attack.mitre.org/mitigations/M1040"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          },
          {
            "mid": "M1049",
            "name": "Antivirus/Antimalware",
            "description": "Use signatures or heuristics to detect malicious software.",
            "url": "https://attack.mitre.org/mitigations/M1049"
          }
        ]
      },
      {
        "tid": "T1059.006",
        "name": "Command and Scripting Interpreter: Python",
        "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the python.exe interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
        "url": "https://attack.mitre.org/techniques/T1059/006",
        "detection": "Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
        "mitigations": [
          {
            "mid": "M1033",
            "name": "Limit Software Installation",
            "description": "Block users or groups from installing unapproved software.",
            "url": "https://attack.mitre.org/mitigations/M1033"
          },
          {
            "mid": "M1038",
            "name": "Execution Prevention",
            "description": "Block execution of code on a system through application control, and/or script blocking.",
            "url": "https://attack.mitre.org/mitigations/M1038"
          },
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          },
          {
            "mid": "M1049",
            "name": "Antivirus/Antimalware",
            "description": "Use signatures or heuristics to detect malicious software.",
            "url": "https://attack.mitre.org/mitigations/M1049"
          }
        ]
      },
      {
        "tid": "T1059.007",
        "name": "Command and Scripting Interpreter: JavaScript",
        "description": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple’s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple’s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple’s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and <a href=\"https://attack.mitre.org/techniques/T1059/002\">AppleScript</a>. Scripts can be executed via the command line utility osascript, they can be compiled into applications or script files via osacompile, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a> or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of <a href=\"https://attack.mitre.org/techniques/T1027\">Obfuscated Files or Information</a>.",
        "url": "https://attack.mitre.org/techniques/T1059/007",
        "detection": "Monitor for events associated with scripting execution, such as process activity, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving scripts, or loading of modules associated with scripting languages (ex: JScript.dll). Scripting execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information <a href=\"https://attack.mitre.org/tactics/TA0007\">Discovery</a>, <a href=\"https://attack.mitre.org/tactics/TA0009\">Collection</a>, or other programmable post-compromise behaviors and could be used as indicators of detection leading back to the source.\nMonitor for execution of JXA through osascript and usage of OSAScript API that may be related to other suspicious behavior occurring on the system.\nUnderstanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If scripting is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.",
        "mitigations": [
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1038",
            "name": "Execution Prevention",
            "description": "Block execution of code on a system through application control, and/or script blocking.",
            "url": "https://attack.mitre.org/mitigations/M1038"
          },
          {
            "mid": "M1040",
            "name": "Behavior Prevention on Endpoint",
            "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
            "url": "https://attack.mitre.org/mitigations/M1040"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      }
    ]
  },
  {
    "rank": 2,
    "tid": "T1053",
    "name": "Scheduled Task/Job",
    "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).",
    "url": "https://attack.mitre.org/techniques/T1053",
    "detection": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. \nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
    "score": 2.8473428571428574,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1053.001",
        "name": "Scheduled Task/Job: At (Linux)",
        "description": "Adversaries may abuse the <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility to perform task scheduling for initial, recurring, or future execution of malicious code. The <a href=\"https://attack.mitre.org/software/S0110\">at</a> command within Linux operating systems enables administrators to schedule tasks.(Citation: Kifarunix - Task Scheduling in Linux)\nAn adversary may use <a href=\"https://attack.mitre.org/software/S0110\">at</a> in Linux environments to execute programs at system startup or on a scheduled basis for persistence. <a href=\"https://attack.mitre.org/software/S0110\">at</a> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.\nAdversaries may also abuse <a href=\"https://attack.mitre.org/software/S0110\">at</a> to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, <a href=\"https://attack.mitre.org/software/S0110\">at</a> may also be used for <a href=\"https://attack.mitre.org/tactics/TA0004\">Privilege Escalation</a> if the binary is allowed to run as superuser via sudo.(Citation: GTFObins at)",
        "url": "https://attack.mitre.org/techniques/T1053/001",
        "detection": "Monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc. \nReview all jobs using the atq command and ensure IP addresses stored in the SSH_CONNECTION and SSH_CLIENT variables, machines that created the jobs, are trusted hosts. All <a href=\"https://attack.mitre.org/software/S0110\">at</a> jobs are stored in /var/spool/cron/atjobs/.(Citation: rowland linux at 2019)\nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      },
      {
        "tid": "T1053.003",
        "name": "Scheduled Task/Job: Cron",
        "description": "Adversaries may abuse the cron utility to perform task scheduling for initial or recurring execution of malicious code.(Citation: 20 macOS Common Tools and Techniques) The cron utility is a time-based job scheduler for Unix-like operating systems.  The  crontab file contains the schedule of cron entries to be run and the specified times for execution. Any crontab files are stored in operating system-specific file paths.\nAn adversary may use cron in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence. ",
        "url": "https://attack.mitre.org/techniques/T1053/003",
        "detection": "Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc.  \nSuspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement. ",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      },
      {
        "tid": "T1053.006",
        "name": "Scheduled Task/Job: Systemd Timers",
        "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension .timer that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to <a href=\"https://attack.mitre.org/techniques/T1053/003\">Cron</a> in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the systemctl command line utility, which operates over <a href=\"https://attack.mitre.org/techniques/T1021/004\">SSH</a>.(Citation: Systemd Remote Control)\nEach .timer file must have a corresponding .service file with the same name, e.g., example.timer and example.service. .service files are <a href=\"https://attack.mitre.org/techniques/T1543/002\">Systemd Service</a> unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to /etc/systemd/system/ and /usr/lib/systemd/system while user level are written to ~/.config/systemd/user/.\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.",
        "url": "https://attack.mitre.org/techniques/T1053/006",
        "detection": "Systemd timer unit files may be detected by auditing file creation and modification events within the /etc/systemd/system, /usr/lib/systemd/system/, and ~/.config/systemd/user/ directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.\nSuspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: systemctl list-timers –all. Analyze the contents of corresponding .service files present on the file system and ensure that they refer to legitimate, expected executables.\nAudit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citation: archlinux Systemd Timers Aug 2020)",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          }
        ]
      }
    ]
  },
  {
    "rank": 3,
    "tid": "T1562",
    "name": "Impair Defenses",
    "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\nAdversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.",
    "url": "https://attack.mitre.org/techniques/T1562",
    "detection": "Monitor processes and command-line arguments to see if security tools or logging services are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools.  Lack of log events may be suspicious.\nMonitor environment variables and APIs that can be leveraged to disable security measures.",
    "score": 2.499685714285715,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1024",
        "name": "Restrict Registry Permissions",
        "description": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
        "url": "https://attack.mitre.org/mitigations/M1024"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1562.001",
        "name": "Impair Defenses: Disable or Modify Tools",
        "description": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take the many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information.\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to <a href=\"https://attack.mitre.org/techniques/T1562/006\">Indicator Blocking</a>, adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls)",
        "url": "https://attack.mitre.org/techniques/T1562/001",
        "detection": "Monitor processes and command-line arguments to see if security tools/services are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools. Monitoring for changes to other known features used by deployed security tools may also expose malicious activity.\nLack of expected log events may be suspicious.",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1024",
            "name": "Restrict Registry Permissions",
            "description": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
            "url": "https://attack.mitre.org/mitigations/M1024"
          }
        ]
      },
      {
        "tid": "T1562.003",
        "name": "Impair Defenses: Impair Command History Logging",
        "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The HISTCONTROL environment variable keeps track of what should be saved by the history command and eventually into the ~/.bash_history file when a user logs out. HISTCONTROL does not exist by default on macOS, but can be set by the user and will be respected.\nAdversaries may clear the history environment variable (unset HISTFILE) or set the command history size to zero (export HISTFILESIZE=0) to prevent logging of commands. Additionally, HISTCONTROL can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". HISTCONTROL can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.\nOn Windows systems, the PSReadLine module tracks commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt by default). Adversaries may change where these logs are saved using Set-PSReadLineOption -HistorySavePath {File Path}. This will cause ConsoleHost_history.txt to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command Set-PSReadlineOption -HistorySaveStyle SaveNothing.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
        "url": "https://attack.mitre.org/techniques/T1562/003",
        "detection": "Correlating a user session with a distinct lack of new commands in their .bash_history can be a clue to suspicious behavior. Additionally, users checking or changing their HISTCONTROL, HISTFILE, or HISTFILESIZE environment variables may be suspicious.\nMonitor for modification of PowerShell command history settings through processes being created with -HistorySaveStyle SaveNothing command-line arguments and use of the PowerShell commands Set-PSReadlineOption -HistorySaveStyle SaveNothing and Set-PSReadLineOption -HistorySavePath {File Path}. ",
        "mitigations": [
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          },
          {
            "mid": "M1039",
            "name": "Environment Variable Permissions",
            "description": "Prevent modification of environment variables by unauthorized users and groups.",
            "url": "https://attack.mitre.org/mitigations/M1039"
          }
        ]
      },
      {
        "tid": "T1562.004",
        "name": "Impair Defenses: Disable or Modify System Firewall",
        "description": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. ",
        "url": "https://attack.mitre.org/techniques/T1562/004",
        "detection": "Monitor processes and command-line arguments to see if firewalls are disabled or modified. Monitor Registry edits to keys that manage firewalls.",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1024",
            "name": "Restrict Registry Permissions",
            "description": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
            "url": "https://attack.mitre.org/mitigations/M1024"
          }
        ]
      },
      {
        "tid": "T1562.006",
        "name": "Impair Defenses: Indicator Blocking",
        "description": "An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> or <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a>.\nETW interruption can be achieved multiple ways, however most directly by defining conditions using the <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> Set-EtwTraceProvider cmdlet or by interfacing directly with the Registry to make alterations.\nIn the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products. ",
        "url": "https://attack.mitre.org/techniques/T1562/006",
        "detection": "Detect lack of reported activity from a host sensor. Different methods of blocking may cause different disruptions in reporting. Systems may suddenly stop reporting all data or only certain kinds of data.\nDepending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked. For example, Sysmon will log when its configuration state has changed (Event ID 16) and Windows Management Instrumentation (WMI) may be used to subscribe ETW providers that log any provider removal from a specific trace session. (Citation: Medium Event Tracing Tampering 2018) To detect changes in ETW you can also monitor the registry key which contains configurations for all ETW event providers: HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\AUTOLOGGER_NAME{PROVIDER_GUID}",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1054",
            "name": "Software Configuration",
            "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
            "url": "https://attack.mitre.org/mitigations/M1054"
          }
        ]
      },
      {
        "tid": "T1562.010",
        "name": "Impair Defenses: Downgrade Attack",
        "description": "Adversaries may downgrade or use a version of system features that may be outdated, vulnerable, and/or does not support updated security controls such as logging. For example, <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> versions 5+ includes Script Block Logging (SBL) which can record executed script content. However, adversaries may attempt to execute a previous version of PowerShell that does not support SBL with the intent to <a href=\"https://attack.mitre.org/techniques/T1562\">Impair Defenses</a> while running malicious scripts that may have otherwise been detected.(Citation: CrowdStrike BGH Ransomware 2021)(Citation: Mandiant BYOL 2018)\nAdversaries may downgrade and use less-secure versions of various features of a system, such as <a href=\"https://attack.mitre.org/techniques/T1059\">Command and Scripting Interpreter</a>s or even network protocols that can be abused to enable <a href=\"https://attack.mitre.org/techniques/T1557\">Adversary-in-the-Middle</a>.(Citation: Praetorian TLS Downgrade Attack 2014)",
        "url": "https://attack.mitre.org/techniques/T1562/010",
        "detection": "Monitor for commands or other activity that may be indicative of attempts to abuse older or deprecated technologies (ex: powershell –v 2). Also monitor for other abnormal events, such as execution of and/or processes spawning from a version of a tool that is not expected in the environment.",
        "mitigations": [
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      }
    ]
  },
  {
    "rank": 4,
    "tid": "T1021",
    "name": "Remote Services",
    "description": "Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.\nIn an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP).(Citation: SSH Secure Shell)(Citation: TechNet Remote Desktop Services)\nLegitimate applications (such as <a href=\"https://attack.mitre.org/techniques/T1072\">Software Deployment Tools</a> and other administrative programs) may utilize <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a> to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including <a href=\"https://attack.mitre.org/techniques/T1021/005\">VNC</a> to send the screen and control buffers and <a href=\"https://attack.mitre.org/techniques/T1021/004\">SSH</a> for secure file transfer.(Citation: Remote Management MDM macOS)(Citation: Kickstart Apple Remote Desktop commands)(Citation: Apple Remote Desktop Admin Guide 3.3) Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data.(Citation: FireEye 2019 Apple Remote Desktop)(Citation: Lockboxx ARD 2019)(Citation: Kickstart Apple Remote Desktop commands)",
    "url": "https://attack.mitre.org/techniques/T1021",
    "detection": "Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement. \nUse of applications such as ARD may be legitimate depending on the environment and how it’s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using these applications. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. \nIn macOS, you can review logs for \"screensharingd\" and \"Authentication\" event messages. Monitor network connections regarding remote management (ports tcp:3283 and tcp:5900) and for remote login (port tcp:22).(Citation: Lockboxx ARD 2019)(Citation: Apple Unified Log Analysis Remote Login and Screen Sharing)",
    "score": 2.359182904572381,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1021.004",
        "name": "Remote Services: SSH",
        "description": "Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.\nSSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user’s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.",
        "url": "https://attack.mitre.org/techniques/T1021/004",
        "detection": "Use of SSH may be legitimate depending on the environment and how it’s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.\nOn macOS systems log show --predicate 'process = \"sshd\"' can be used to review incoming SSH connection attempts for suspicious activity. The command log show --info --predicate 'process = \"ssh\" or eventMessage contains \"ssh\"' can be used to review outgoing SSH connection activity.(Citation: Apple Unified Log Analysis Remote Login and Screen Sharing)\nOn Linux systems SSH activity can be found in the logs located in /var/log/auth.log or /var/log/secure depending on the distro you are using.",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1032",
            "name": "Multi-factor Authentication",
            "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
            "url": "https://attack.mitre.org/mitigations/M1032"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      },
      {
        "tid": "T1021.005",
        "name": "Remote Services: VNC",
        "description": "Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to remotely control machines using Virtual Network Computing (VNC).  VNC is a platform-independent desktop sharing system that uses the RFB (“remote framebuffer”) protocol to enable users to remotely control another computer’s display by relaying the screen, mouse, and keyboard inputs over the network.(Citation: The Remote Framebuffer Protocol)\nVNC differs from <a href=\"https://attack.mitre.org/techniques/T1021/001\">Remote Desktop Protocol</a> as VNC is screen-sharing software rather than resource-sharing software. By default, VNC uses the system's authentication, but it can be configured to use credentials specific to VNC.(Citation: MacOS VNC software for Remote Desktop)(Citation: VNC Authentication)\nAdversaries may abuse VNC to perform malicious actions as the logged-on user such as opening documents, downloading files, and running arbitrary commands. An adversary could use VNC to remotely control and monitor a system to collect data and information to pivot to other systems within the network. Specific VNC libraries/implementations have also been susceptible to brute force attacks and memory usage exploitation.(Citation: Hijacking VNC)(Citation: macOS root VNC login without authentication)(Citation: VNC Vulnerabilities)(Citation: Offensive Security VNC Authentication Check)(Citation: Attacking VNC Servers PentestLab)(Citation: Havana authentication bug)",
        "url": "https://attack.mitre.org/techniques/T1021/005",
        "detection": "Use of VNC may be legitimate depending on the environment and how it’s used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior using VNC.\nOn macOS systems log show --predicate 'process = \"screensharingd\" and eventMessage contains \"Authentication:\"' can be used to review incoming VNC connection attempts for suspicious activity.(Citation: Apple Unified Log Analysis Remote Login and Screen Sharing)\nMonitor for use of built-in debugging environment variables (such as those containing credentials or other sensitive information) as well as test/default users on VNC servers, as these can leave openings for adversaries to abuse.(Citation: Gnome Remote Desktop grd-settings)(Citation: Gnome Remote Desktop gschema)",
        "mitigations": [
          {
            "mid": "M1033",
            "name": "Limit Software Installation",
            "description": "Block users or groups from installing unapproved software.",
            "url": "https://attack.mitre.org/mitigations/M1033"
          },
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          },
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      }
    ]
  },
  {
    "rank": 5,
    "tid": "T1003",
    "name": "OS Credential Dumping",
    "description": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform <a href=\"https://attack.mitre.org/tactics/TA0008\">Lateral Movement</a> and access restricted information.\nSeveral of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.",
    "url": "https://attack.mitre.org/techniques/T1003",
    "detection": "<h3>Windows</h3>\nMonitor for unexpected processes interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as <a href=\"https://attack.mitre.org/software/S0002\">Mimikatz</a> access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> to reduce potential indicators of malicious activity.\nHash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> in-use by adversaries may help as well. \nOn Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like <a href=\"https://attack.mitre.org/software/S0002\">Mimikatz</a>. <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, (Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\nMonitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync. (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) Note: Domain controllers may not log replication requests originating from the default domain controller account. (Citation: Harmj0y DCSync Sept 2015). Also monitor for network protocols  (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft NRPC Dec 2017) and other replication requests (Citation: Microsoft SAMR) from IPs not associated with known domain controllers. (Citation: AdSecurity DCSync Sept 2015)\n<h3>Linux</h3>\nTo obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path /proc/<pid>/maps, where the <pid> directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.",
    "score": 2.3380676171838095,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1015",
        "name": "Active Directory Configuration",
        "description": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
        "url": "https://attack.mitre.org/mitigations/M1015"
      },
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1025",
        "name": "Privileged Process Integrity",
        "description": "Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",
        "url": "https://attack.mitre.org/mitigations/M1025"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1027",
        "name": "Password Policies",
        "description": "Set and enforce secure password policies for accounts.",
        "url": "https://attack.mitre.org/mitigations/M1027"
      },
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
        "url": "https://attack.mitre.org/mitigations/M1040"
      },
      {
        "mid": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Protect sensitive information with strong encryption.",
        "url": "https://attack.mitre.org/mitigations/M1041"
      },
      {
        "mid": "M1043",
        "name": "Credential Access Protection",
        "description": "Use capabilities to prevent successful credential access by adversaries; including blocking forms of credential dumping.",
        "url": "https://attack.mitre.org/mitigations/M1043"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1003.007",
        "name": "OS Credential Dumping: Proc Filesystem",
        "description": "Adversaries may gather credentials from information stored in the Proc filesystem or /proc. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.\nThis functionality has been implemented in the MimiPenguin(Citation: MimiPenguin GitHub May 2017), an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.",
        "url": "https://attack.mitre.org/techniques/T1003/007",
        "detection": "To obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path /proc/*/maps, where the * directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          }
        ]
      },
      {
        "tid": "T1003.008",
        "name": "OS Credential Dumping: /etc/passwd and /etc/shadow",
        "description": "Adversaries may attempt to dump the contents of /etc/passwd and /etc/shadow to enable offline password cracking. Most modern Linux operating systems use a combination of /etc/passwd and /etc/shadow to store user account information including password hashes in /etc/shadow. By default, /etc/shadow is only readable by the root user.(Citation: Linux Password and Shadow File Formats)\nThe Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) # /usr/bin/unshadow /etc/passwd /etc/shadow &gt; /tmp/crack.password.db",
        "url": "https://attack.mitre.org/techniques/T1003/008",
        "detection": "The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes attempting to access /etc/passwd and /etc/shadow, alerting on the pid, process name, and arguments of such programs.",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          }
        ]
      }
    ]
  },
  {
    "rank": 6,
    "tid": "T1543",
    "name": "Create or Modify System Process",
    "description": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. (Citation: TechNet Services) On macOS, launchd processes known as <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a> and <a href=\"https://attack.mitre.org/techniques/T1543/001\">Launch Agent</a> are run to finish system initialization and load user specific parameters.(Citation: AppleDocs Launch Agent Daemons) \nAdversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  \nServices, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges. (Citation: OSX Malware Detection).  ",
    "url": "https://attack.mitre.org/techniques/T1543",
    "detection": "Monitor for changes to system processes that do not correlate with known software, patch cycles, etc., including by comparing results against a trusted system baseline. New, benign system processes may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.  \nCommand-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. \nMonitor for changes to files associated with system-level processes.",
    "score": 2.333914285714286,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1033",
        "name": "Limit Software Installation",
        "description": "Block users or groups from installing unapproved software.",
        "url": "https://attack.mitre.org/mitigations/M1033"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1543.002",
        "name": "Create or Modify System Process: Systemd Service",
        "description": "Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014)(Citation: Freedesktop.org Linux systemd 29SEP2018) Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.\nSystemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the /etc/systemd/system and /usr/lib/systemd/system directories and have the file extension .service. Each service unit file may contain numerous directives that can execute system commands:\n<ul>\n<li>ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by 'systemctl' or on system start if the service is set to automatically start. </li>\n<li>ExecReload directive covers when a service restarts. </li>\n<li>ExecStop and ExecStopPost directives cover when a service is stopped or manually by 'systemctl'.</li>\n</ul>\nAdversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at system boot.(Citation: Anomali Rocke March 2019)\nWhile adversaries typically require root privileges to create/modify service unit files in the /etc/systemd/system and /usr/lib/systemd/system directories, low privilege users can create/modify service unit files in directories such as ~/.config/systemd/user/ to achieve user-level persistence.(Citation: Rapid7 Service Persistence 22JUNE2016)",
        "url": "https://attack.mitre.org/techniques/T1543/002",
        "detection": "Systemd service unit files may be detected by auditing file creation and modification events within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/<username>/.config/systemd/user/ directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.\nSuspicious systemd services can also be identified by comparing results against a trusted system baseline. Malicious systemd services may be detected by using the systemctl utility to examine system wide services: systemctl list-units -–type=service –all. Analyze the contents of .service files present on the file system and ensure that they refer to legitimate, expected executables.\nAuditing the execution and command-line arguments of the 'systemctl' utility, as well related utilities such as /usr/sbin/service may reveal malicious systemd service execution.",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1033",
            "name": "Limit Software Installation",
            "description": "Block users or groups from installing unapproved software.",
            "url": "https://attack.mitre.org/mitigations/M1033"
          }
        ]
      }
    ]
  },
  {
    "rank": 7,
    "tid": "T1574",
    "name": "Hijack Execution Flow",
    "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
    "url": "https://attack.mitre.org/techniques/T1574",
    "detection": "Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.\nLook for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.\nMonitor for changes to environment variables, as well as the commands to implement these changes.\nMonitor processes for unusual activity (e.g., a process that does not use the network begins to do so, abnormal process call trees). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.\nService changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path or failure parameters are changed to values that are not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nTools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information. (Citation: Autoruns for Windows) Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.",
    "score": 2.302204761904762,
    "cloud_score": 0.2,
    "mitigations": [
      {
        "mid": "M1013",
        "name": "Application Developer Guidance",
        "description": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
        "url": "https://attack.mitre.org/mitigations/M1013"
      },
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1024",
        "name": "Restrict Registry Permissions",
        "description": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
        "url": "https://attack.mitre.org/mitigations/M1024"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1044",
        "name": "Restrict Library Loading",
        "description": "Prevent abuse of library loading mechanisms in the operating system and software to load untrusted code by configuring appropriate library loading mechanisms and investigating potential vulnerable software.",
        "url": "https://attack.mitre.org/mitigations/M1044"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      },
      {
        "mid": "M1052",
        "name": "User Account Control",
        "description": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
        "url": "https://attack.mitre.org/mitigations/M1052"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1574.006",
        "name": "Hijack Execution Flow: Dynamic Linker Hijacking",
        "description": "Adversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such as LD_PRELOAD on Linux or DYLD_INSERT_LIBRARIES on macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)(Citation: Apple Doco Archive Dynamic Libraries) These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.(Citation: Baeldung LD_PRELOAD)\nOn Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using the export command, setenv function, or putenv function. Adversaries can also leverage <a href=\"https://attack.mitre.org/techniques/T1574/006\">Dynamic Linker Hijacking</a> to export variables in a shell or set variables programmatically using higher level syntax such Python’s os.environ.\nOn Linux, adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or /etc/ld.so.preload file.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries) Libraries specified by LD_PRELOAD are loaded and mapped into memory by dlopen() and mmap() respectively.(Citation: Code Injection on Linux and macOS)(Citation: Uninformed Needle) (Citation: Phrack halfdead 1997)(Citation: Brown Exploiting Linkers) \nOn macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set the DYLD_INSERT_LIBRARIES environment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.(Citation: TheEvilBit DYLD_INSERT_LIBRARIES)(Citation: Timac DYLD_INSERT_LIBRARIES)(Citation: Gabilondo DYLD_INSERT_LIBRARIES Catalina Bypass) ",
        "url": "https://attack.mitre.org/techniques/T1574/006",
        "detection": "Monitor for changes to environment variables and files associated with loading shared libraries such as LD_PRELOAD and DYLD_INSERT_LIBRARIES, as well as the commands to implement these changes.\nMonitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.",
        "mitigations": [
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          },
          {
            "mid": "M1038",
            "name": "Execution Prevention",
            "description": "Block execution of code on a system through application control, and/or script blocking.",
            "url": "https://attack.mitre.org/mitigations/M1038"
          }
        ]
      }
    ]
  },
  {
    "rank": 8,
    "tid": "T1548",
    "name": "Abuse Elevation Control Mechanism",
    "description": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system.",
    "url": "https://attack.mitre.org/techniques/T1548",
    "detection": "Monitor the file system for files that have the setuid or setgid bits set. Also look for any process API calls for behavior that may be indicative of <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> and unusual loaded DLLs through <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>, which indicate attempts to gain access to higher privileged processes. On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).\nConsider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.\nOn Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file.\nThere are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Some UAC bypass methods rely on modifying specific, user-accessible Registry settings. Analysts should monitor Registry settings for unauthorized changes.",
    "score": 2.1190755531819048,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      },
      {
        "mid": "M1052",
        "name": "User Account Control",
        "description": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
        "url": "https://attack.mitre.org/mitigations/M1052"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1548.001",
        "name": "Abuse Elevation Control Mechanism: Setuid and Setgid",
        "description": "An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. (Citation: setuid man page). Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges.\nInstead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an \"s\" instead of an \"x\" when viewing a file's attributes via ls -l. The chmod program can set these bits with via bitmasking, chmod 4777 [file] or via shorthand naming, chmod u+s [file].\nAdversaries can use this mechanism on their own malware to make sure they're able to execute in elevated contexts in the future.(Citation: OSX Keydnap malware).",
        "url": "https://attack.mitre.org/techniques/T1548/001",
        "detection": "Monitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.",
        "mitigations": [
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          }
        ]
      },
      {
        "tid": "T1548.003",
        "name": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching",
        "description": "Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.\nWithin Linux and MacOS systems, sudo (sometimes referred to as \"superuser do\") allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The sudo command \"allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.\"(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a timestamp_timeout, which is the amount of time in minutes between instances of sudo before it will re-prompt for a password. This is because sudo has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at /var/db/sudo with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a tty_tickets variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).\nThe sudoers file, /etc/sudoers, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like user1 ALL=(ALL) NOPASSWD: ALL (Citation: OSX.Dok Malware). Elevated privileges are required to edit this file though.\nAdversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user's password. For example, /var/db/sudo's timestamp can be monitored to see if it falls within the timestamp_timeout range. If it does, then malware can execute sudo commands without needing to supply the user's password. Additional, if tty_tickets is disabled, adversaries can do this from any tty for that user.\nIn the wild, malware has disabled tty_tickets to potentially make scripting easier by issuing echo \\'Defaults !tty_tickets\\' &gt;&gt; /etc/sudoers (Citation: cybereason osx proton). In order for this change to be reflected, the malware also issued killall Terminal. As of macOS Sierra, the sudoers file has tty_tickets enabled by default.",
        "url": "https://attack.mitre.org/techniques/T1548/003",
        "detection": "On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo). This technique is abusing normal functionality in macOS and Linux systems, but sudo has the ability to log all input and output based on the LOG_INPUT and LOG_OUTPUT directives in the /etc/sudoers file.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          }
        ]
      }
    ]
  },
  {
    "rank": 9,
    "tid": "T1055",
    "name": "Process Injection",
    "description": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
    "url": "https://attack.mitre.org/techniques/T1055",
    "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC/NtQueueApcThread, and those that can be used to modify memory within another process, such as VirtualAllocEx/WriteProcessMemory, may be used for this technique.(Citation: Elastic Process Injection July 2017) \nMonitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. \nMonitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \nMonitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules.(Citation: Microsoft Sysmon v6 May 2017) \nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
    "score": 2.0690476190476192,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
        "url": "https://attack.mitre.org/mitigations/M1040"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1055.008",
        "name": "Process Injection: Ptrace System Calls",
        "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. \nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) \nPtrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.(Citation: BH Linux Inject) \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process. ",
        "url": "https://attack.mitre.org/techniques/T1055/008",
        "detection": "Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1040",
            "name": "Behavior Prevention on Endpoint",
            "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
            "url": "https://attack.mitre.org/mitigations/M1040"
          }
        ]
      },
      {
        "tid": "T1055.009",
        "name": "Process Injection: Proc Memory",
        "description": "Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. \nProc memory injection involves enumerating the memory of a process via the /proc filesystem (/proc/[pid]) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within /proc/[pid]/maps can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) \nOther techniques such as <a href=\"https://attack.mitre.org/techniques/T1574/006\">Dynamic Linker Hijacking</a> may be used to populate a target process with more available gadgets. Similar to <a href=\"https://attack.mitre.org/techniques/T1055/012\">Process Hollowing</a>, proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) \nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process. ",
        "url": "https://attack.mitre.org/techniques/T1055/009",
        "detection": "File system monitoring can determine if /proc files are being modified. Users should not have permission to modify these in most cases. \nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1040",
            "name": "Behavior Prevention on Endpoint",
            "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
            "url": "https://attack.mitre.org/mitigations/M1040"
          }
        ]
      },
      {
        "tid": "T1055.014",
        "name": "Process Injection: VDSO Hijacking",
        "description": "Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. \nVDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via <a href=\"https://attack.mitre.org/techniques/T1055/008\">Ptrace System Calls</a>. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process' global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009) (Citation: Backtrace VDSO) (Citation: VDSO Aug 2005) (Citation: Syscall 2014)\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.  ",
        "url": "https://attack.mitre.org/techniques/T1055/014",
        "detection": "Monitor for malicious usage of system calls, such as ptrace and mmap, that can be used to attach to, manipulate memory, then redirect a processes' execution path. Monitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.(Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits) \nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
        "mitigations": [
          {
            "mid": "M1040",
            "name": "Behavior Prevention on Endpoint",
            "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
            "url": "https://attack.mitre.org/mitigations/M1040"
          }
        ]
      }
    ]
  },
  {
    "rank": 10,
    "tid": "T1105",
    "name": "Ingress Tool Transfer",
    "description": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
    "url": "https://attack.mitre.org/techniques/T1105",
    "detection": "Monitor for file creation and files transferred into the network. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
    "score": 2.066446638475238,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 11,
    "tid": "T1036",
    "name": "Masquerading",
    "description": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a>.(Citation: LOLBAS Main Site)",
    "url": "https://attack.mitre.org/techniques/T1036",
    "detection": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.\nIf file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Elastic Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)\nLook for indications of common characters that may indicate an attempt to trick users into misidentifying the file type, such as a space as the last character of a file name or the right-to-left override characters\"\\u202E\", \"[U+202E]\", and \"%E2%80%AE”.",
    "score": 2.019819047619048,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1045",
        "name": "Code Signing",
        "description": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
        "url": "https://attack.mitre.org/mitigations/M1045"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1036.002",
        "name": "Masquerading: Right-to-Left Override",
        "description": "Adversaries may abuse the right-to-left override (RTLO or RLO) character (U+202E) to disguise a string and/or file name to make it appear benign. RTLO is a non-printing Unicode character that causes the text that follows it to be displayed in reverse. For example, a Windows screensaver executable named March 25 \\u202Excod.scr will display as March 25 rcs.docx. A JavaScript file named photo_high_re\\u202Egnp.js will be displayed as photo_high_resj.png.(Citation: Infosecinstitute RTLO Technique)\nAdversaries may abuse the RTLO character as a means of tricking a user into executing what they think is a benign file type. A common use of this technique is with <a href=\"https://attack.mitre.org/techniques/T1566/001\">Spearphishing Attachment</a>/<a href=\"https://attack.mitre.org/techniques/T1204/002\">Malicious File</a> since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation: Kaspersky RTLO Cyber Crime) RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.",
        "url": "https://attack.mitre.org/techniques/T1036/002",
        "detection": "Detection methods should include looking for common formats of RTLO characters within filenames such as \\u202E, [U+202E], and %E2%80%AE. Defenders should also check their analysis tools to ensure they do not interpret the RTLO character and instead print the true name of the file containing it.",
        "mitigations": []
      },
      {
        "tid": "T1036.003",
        "name": "Masquerading: Rename System Utilities",
        "description": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. (Citation: LOLBAS Main Site) It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename rundll32.exe). (Citation: Elastic Masquerade Ball) An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. (Citation: F-Secure CozyDuke)",
        "url": "https://attack.mitre.org/techniques/T1036/003",
        "detection": "If file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Elastic Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          }
        ]
      },
      {
        "tid": "T1036.004",
        "name": "Masquerading: Masquerade Task or Service",
        "description": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis)",
        "url": "https://attack.mitre.org/techniques/T1036/004",
        "detection": "Look for changes to tasks and services that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks or services may show up as outlier processes that have not been seen before when compared against historical data. Monitor processes and command-line arguments for actions that could be taken to create tasks or services. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
        "mitigations": []
      },
      {
        "tid": "T1036.005",
        "name": "Masquerading: Match Legitimate Name or Location",
        "description": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\nAdversaries may also use the same icon of the file they are trying to mimic.",
        "url": "https://attack.mitre.org/techniques/T1036/005",
        "detection": "Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.\nIf file names are mismatched between the file name on disk and that of the binary's PE metadata, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries by looking to see if the InternalName, OriginalFilename, and/or ProductName match what is expected could provide useful leads, but may not always be indicative of malicious activity. (Citation: Elastic Masquerade Ball) Do not focus on the possible names a file could have, but instead on the command-line arguments that are known to be used and are distinct because it will have a better rate of detection.(Citation: Twitter ItsReallyNick Masquerading Update)\nIn containerized environments, use image IDs and layer hashes to compare images instead of relying only on their names.(Citation: Docker Images) Monitor for the unexpected creation of new resources within your cluster in Kubernetes, especially those created by atypical users.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1038",
            "name": "Execution Prevention",
            "description": "Block execution of code on a system through application control, and/or script blocking.",
            "url": "https://attack.mitre.org/mitigations/M1038"
          },
          {
            "mid": "M1045",
            "name": "Code Signing",
            "description": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
            "url": "https://attack.mitre.org/mitigations/M1045"
          }
        ]
      },
      {
        "tid": "T1036.006",
        "name": "Masquerading: Space after Filename",
        "description": "Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.\nFor example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to evil.txt  (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back).\nAdversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.",
        "url": "https://attack.mitre.org/techniques/T1036/006",
        "detection": "It's not common for spaces to be at the end of filenames, so this is something that can easily be checked with file monitoring. From the user's perspective though, this is very hard to notice from within the Finder.app or on the command-line in Terminal.app. Processes executed from binaries containing non-standard extensions in the filename are suspicious.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 12,
    "tid": "T1090",
    "name": "Proxy",
    "description": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including <a href=\"https://attack.mitre.org/software/S0040\">HTRAN</a>, ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic.\nAdversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic.",
    "url": "https://attack.mitre.org/techniques/T1090",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)\nConsider monitoring for traffic to known anonymity networks (such as <a href=\"https://attack.mitre.org/software/S0183\">Tor</a>).",
    "score": 2.011595238095238,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1020",
        "name": "SSL/TLS Inspection",
        "description": "Break and inspect SSL/TLS sessions to look at encrypted web traffic for adversary activity.",
        "url": "https://attack.mitre.org/mitigations/M1020"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1090.001",
        "name": "Proxy: Internal Proxy",
        "description": "Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including <a href=\"https://attack.mitre.org/software/S0040\">HTRAN</a>, ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.\nBy using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.",
        "url": "https://attack.mitre.org/techniques/T1090/001",
        "detection": "Analyze network data for uncommon data flows between clients that should not or often do not communicate with one another. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1090.002",
        "name": "Proxy: External Proxy",
        "description": "Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including <a href=\"https://attack.mitre.org/software/S0040\">HTRAN</a>, ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.\nExternal connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.",
        "url": "https://attack.mitre.org/techniques/T1090/002",
        "detection": "Analyze network data for uncommon data flows, such as a client sending significantly more data than it receives from an external server. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1090.003",
        "name": "Proxy: Multi-hop Proxy",
        "description": "To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network. (Citation: Onion Routing)\nIn the case of network infrastructure, particularly routers, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain within the Wide-Area Network (WAN) of the enterprise.  By leveraging <a href=\"https://attack.mitre.org/techniques/T1601/001\">Patch System Image</a>, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes.  This custom onion routing network will transport the encrypted C2 traffic through the compromised population, allowing adversaries to communicate with any device within the onion routing network.  This method is dependent upon the <a href=\"https://attack.mitre.org/techniques/T1599\">Network Boundary Bridging</a> method in order to allow the adversaries to cross the protected network boundary of the Internet perimeter and into the organization’s WAN. Protocols such as ICMP may be used as a transport.",
        "url": "https://attack.mitre.org/techniques/T1090/003",
        "detection": "When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as <a href=\"https://attack.mitre.org/software/S0183\">Tor</a>) or known adversary infrastructure that uses this technique.\nIn context of network devices, monitor traffic for encrypted communications from the Internet that is addressed to border routers.  Compare this traffic with the configuration to determine whether it matches with any configured site-to-site Virtual Private Network (VPN) connections the device was intended to have. Monitor traffic for encrypted communications originating from potentially breached routers that is addressed to other routers within the organization.  Compare the source and destination with the configuration of the device to determine if these channels are an authorized Virtual Private Network (VPN) connections or other encrypted modes of communication. Monitor ICMP traffic from the Internet that is addressed to border routers and is encrypted.  Few if any legitimate use cases exist for sending encrypted data to a network device via ICMP.",
        "mitigations": [
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      },
      {
        "tid": "T1090.004",
        "name": "Proxy: Domain Fronting",
        "description": "Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, \"domainless\" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).\nFor example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.",
        "url": "https://attack.mitre.org/techniques/T1090/004",
        "detection": "If SSL inspection is in place or the traffic is not encrypted, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blocklist or allowlist of domain names. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015)",
        "mitigations": [
          {
            "mid": "M1020",
            "name": "SSL/TLS Inspection",
            "description": "Break and inspect SSL/TLS sessions to look at encrypted web traffic for adversary activity.",
            "url": "https://attack.mitre.org/mitigations/M1020"
          }
        ]
      }
    ]
  },
  {
    "rank": 13,
    "tid": "T1027",
    "name": "Obfuscated Files or Information",
    "description": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and <a href=\"https://attack.mitre.org/techniques/T1140\">Deobfuscate/Decode Files or Information</a> for <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a>. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. \nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\nAdversaries may also obfuscate commands executed from payloads or directly via a <a href=\"https://attack.mitre.org/techniques/T1059\">Command and Scripting Interpreter</a>. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) ",
    "url": "https://attack.mitre.org/techniques/T1027",
    "detection": "Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system). \nFlag and analyze commands containing indicators of obfuscation and known suspicious syntax such as uninterpreted escape characters like '''^''' and '''\"'''. Windows' Sysmon and Event ID 4688 displays command-line arguments for processes. Deobfuscation tools can be used to detect these indicators in files/payloads. (Citation: GitHub Revoke-Obfuscation) (Citation: FireEye Revoke-Obfuscation July 2017) (Citation: GitHub Office-Crackros Aug 2016) \nObfuscation used in payloads for Initial Access can be detected at the network. Use network intrusion detection systems and email gateway filtering to identify compressed and encrypted attachments and scripts. Some email attachment detonation systems can open compressed and encrypted attachments. Payloads delivered over an encrypted connection from a website require encrypted network traffic inspection. \nThe first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network. ",
    "score": 1.8304554154180952,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
        "url": "https://attack.mitre.org/mitigations/M1040"
      },
      {
        "mid": "M1049",
        "name": "Antivirus/Antimalware",
        "description": "Use signatures or heuristics to detect malicious software.",
        "url": "https://attack.mitre.org/mitigations/M1049"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1027.001",
        "name": "Obfuscated Files or Information: Binary Padding",
        "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ) ",
        "url": "https://attack.mitre.org/techniques/T1027/001",
        "detection": "Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool.  When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file. ",
        "mitigations": []
      },
      {
        "tid": "T1027.003",
        "name": "Obfuscated Files or Information: Steganography",
        "description": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.\n<a href=\"https://attack.mitre.org/software/S0038\">Duqu</a> was an early example of malware that used steganography. It encrypted the gathered information from a victim's system and hid it within an image before exfiltrating the image to a C2 server.(Citation: Wikipedia Duqu) \nBy the end of 2017, a threat group used Invoke-PSImage to hide <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> commands in an image file (.png) and execute the code on a victim's system. In this particular case the <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> code downloaded another obfuscated script to gather intelligence from the victim's machine and communicate it back to the adversary.(Citation: McAfee Malicious Doc Targets Pyeongchang Olympics)  ",
        "url": "https://attack.mitre.org/techniques/T1027/003",
        "detection": "Detection of steganography is difficult unless artifacts are left behind by the obfuscation process that are detectable with a known signature. Look for strings or other signatures left in system artifacts related to decoding steganography.",
        "mitigations": []
      },
      {
        "tid": "T1027.004",
        "name": "Obfuscated Files or Information: Compile After Delivery",
        "description": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)",
        "url": "https://attack.mitre.org/techniques/T1027/004",
        "detection": "Monitor the execution file paths and command-line arguments for common compilers, such as csc.exe and GCC/MinGW, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior. The compilation of payloads may also generate file creation and/or file write events. Look for non-native binary formats and cross-platform compiler and execution frameworks like Mono and determine if they have a legitimate purpose on the system.(Citation: TrendMicro WindowsAppMac) Typically these should only be used in specific and limited cases, like for software development.",
        "mitigations": []
      },
      {
        "tid": "T1027.005",
        "name": "Obfuscated Files or Information: Indicator Removal from Tools",
        "description": "Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.\nA good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.",
        "url": "https://attack.mitre.org/techniques/T1027/005",
        "detection": "The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.",
        "mitigations": []
      },
      {
        "tid": "T1027.006",
        "name": "Obfuscated Files or Information: HTML Smuggling",
        "description": "Adversaries may smuggle data and files past content filters by hiding malicious payloads inside of seemingly benign HTML files. HTML documents can store large binary objects known as JavaScript Blobs (immutable data that represents raw bytes) that can later be constructed into file-like objects. Data may also be stored in Data URLs, which enable embedding media type or MIME files inline of HTML documents. HTML5 also introduced a download attribute that may be used to initiate file downloads.(Citation: HTML Smuggling Menlo Security 2020)(Citation: Outlflank HTML Smuggling 2018)\nAdversaries may deliver payloads to victims that bypass security controls through HTML Smuggling by abusing JavaScript Blobs and/or HTML5 download attributes. Security controls such as web content filters may not identify smuggled malicious files inside of HTML/JS files, as the content may be based on typically benign MIME types such as text/plain and/or text/html. Malicious files or data can be obfuscated and hidden inside of HTML files through Data URLs and/or JavaScript Blobs and can be deobfuscated when they reach the victim (i.e. <a href=\"https://attack.mitre.org/techniques/T1140\">Deobfuscate/Decode Files or Information</a>), potentially bypassing content filters.\nFor example, JavaScript Blobs can be abused to dynamically generate malicious files in the victim machine and may be dropped to disk by abusing JavaScript functions such as msSaveBlob.(Citation: HTML Smuggling Menlo Security 2020)(Citation: MSTIC NOBELIUM May 2021)(Citation: Outlflank HTML Smuggling 2018)(Citation: nccgroup Smuggling HTA 2017)",
        "url": "https://attack.mitre.org/techniques/T1027/006",
        "detection": "Detection of HTML Smuggling is difficult as HTML5 and JavaScript attributes are used by legitimate services and applications. HTML Smuggling can be performed in many ways via JavaScript, developing rules for the different variants, with a combination of different encoding and/or encryption schemes, may be very challenging.(Citation: Outlflank HTML Smuggling 2018) Detecting specific JavaScript and/or HTML5 attribute strings such as Blob, msSaveOrOpenBlob, and/or download may be a good indicator of HTML Smuggling. These strings may also be used by legitimate services therefore it is possible to raise false positives.\nConsider monitoring files downloaded from the Internet, possibly by HTML Smuggling, for suspicious activities. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 14,
    "tid": "T1078",
    "name": "Valid Accounts",
    "description": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise. (Citation: TechNet Credential Theft)",
    "url": "https://attack.mitre.org/techniques/T1078",
    "detection": "Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. (Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\nPerform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence. Checks on these accounts could also include whether default accounts such as Guest have been activated. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.",
    "score": 1.8097713573590475,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1013",
        "name": "Application Developer Guidance",
        "description": "This mitigation describes any guidance or training given to developers of applications to avoid introducing security weaknesses that an adversary may be able to take advantage of.",
        "url": "https://attack.mitre.org/mitigations/M1013"
      },
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1027",
        "name": "Password Policies",
        "description": "Set and enforce secure password policies for accounts.",
        "url": "https://attack.mitre.org/mitigations/M1027"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1078.001",
        "name": "Valid Accounts: Default Accounts",
        "description": "Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems. Default accounts also include default factory/provider set accounts on other types of systems, software, or devices, including the root user account in AWS and the default service account in Kubernetes.(Citation: Microsoft Local Accounts Feb 2019)(Citation: AWS Root User)(Citation: Threat Matrix for Kubernetes)\nDefault accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a> or credential materials to legitimately connect to remote environments via <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a>.(Citation: Metasploit SSH Module)",
        "url": "https://attack.mitre.org/techniques/T1078/001",
        "detection": "Monitor whether default accounts have been activated or logged into. These audits should also include checks on any appliances and applications for default credentials or SSH keys, and if any are discovered, they should be updated immediately.",
        "mitigations": [
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          }
        ]
      },
      {
        "tid": "T1078.002",
        "name": "Valid Accounts: Domain Accounts",
        "description": "Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. (Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)\nAdversaries may compromise domain accounts, some with a high level of privileges, through various means such as <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> or password reuse, allowing access to privileged resources of the domain.",
        "url": "https://attack.mitre.org/techniques/T1078/002",
        "detection": "Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services.(Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).\nOn Linux, check logs and other artifacts created by use of domain authentication services, such as the System Security Services Daemon (sssd).(Citation: Ubuntu SSSD Docs) \nPerform regular audits of domain accounts to detect accounts that may have been created by an adversary for persistence.",
        "mitigations": [
          {
            "mid": "M1017",
            "name": "User Training",
            "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
            "url": "https://attack.mitre.org/mitigations/M1017"
          },
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1032",
            "name": "Multi-factor Authentication",
            "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
            "url": "https://attack.mitre.org/mitigations/M1032"
          }
        ]
      },
      {
        "tid": "T1078.003",
        "name": "Valid Accounts: Local Accounts",
        "description": "Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.\nLocal Accounts may also be abused to elevate privileges and harvest credentials through <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement. ",
        "url": "https://attack.mitre.org/techniques/T1078/003",
        "detection": "Perform regular audits of local system accounts to detect accounts that may have been created by an adversary for persistence. Look for suspicious account behavior, such as accounts logged in at odd times or outside of business hours.",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          }
        ]
      }
    ]
  },
  {
    "rank": 15,
    "tid": "T1204",
    "name": "User Execution",
    "description": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>.\nWhile <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a> frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after <a href=\"https://attack.mitre.org/techniques/T1534\">Internal Spearphishing</a>.",
    "url": "https://attack.mitre.org/techniques/T1204",
    "detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain Initial Access that require user interaction. This includes compression applications, such as those for zip files, that can be used to <a href=\"https://attack.mitre.org/techniques/T1140\">Deobfuscate/Decode Files or Information</a> in payloads.\nAnti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).",
    "score": 1.7715499995819046,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1021",
        "name": "Restrict Web-Based Content",
        "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
        "url": "https://attack.mitre.org/mitigations/M1021"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
        "url": "https://attack.mitre.org/mitigations/M1040"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1204.001",
        "name": "User Execution: Malicious Link",
        "description": "An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from <a href=\"https://attack.mitre.org/techniques/T1566/002\">Spearphishing Link</a>. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via <a href=\"https://attack.mitre.org/techniques/T1203\">Exploitation for Client Execution</a>. Links may also lead users to download files that require execution via <a href=\"https://attack.mitre.org/techniques/T1204/002\">Malicious File</a>.",
        "url": "https://attack.mitre.org/techniques/T1204/001",
        "detection": "Inspect network traffic for indications that a user visited a malicious site, such as links included in phishing campaigns directed at your organization.\nAnti-virus can potentially detect malicious documents and files that are downloaded from a link and executed on the user's computer.",
        "mitigations": [
          {
            "mid": "M1017",
            "name": "User Training",
            "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
            "url": "https://attack.mitre.org/mitigations/M1017"
          },
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1204.002",
        "name": "User Execution: Malicious File",
        "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from <a href=\"https://attack.mitre.org/techniques/T1566/001\">Spearphishing Attachment</a>. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\nAdversaries may employ various forms of <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> on the file to increase the likelihood that a user will open it.\nWhile <a href=\"https://attack.mitre.org/techniques/T1204/002\">Malicious File</a> frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after <a href=\"https://attack.mitre.org/techniques/T1534\">Internal Spearphishing</a>.",
        "url": "https://attack.mitre.org/techniques/T1204/002",
        "detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to <a href=\"https://attack.mitre.org/techniques/T1140\">Deobfuscate/Decode Files or Information</a> in payloads.\nAnti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).",
        "mitigations": [
          {
            "mid": "M1017",
            "name": "User Training",
            "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
            "url": "https://attack.mitre.org/mitigations/M1017"
          },
          {
            "mid": "M1038",
            "name": "Execution Prevention",
            "description": "Block execution of code on a system through application control, and/or script blocking.",
            "url": "https://attack.mitre.org/mitigations/M1038"
          },
          {
            "mid": "M1040",
            "name": "Behavior Prevention on Endpoint",
            "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
            "url": "https://attack.mitre.org/mitigations/M1040"
          }
        ]
      }
    ]
  },
  {
    "rank": 16,
    "tid": "T1219",
    "name": "Remote Access Software",
    "description": "An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks. These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment. Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)\nRemote access tools may be established and used post-compromise as alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.\nAdmin tools such as TeamViewer have been used by several groups targeting institutions in countries of interest to the Russian state and criminal campaigns. (Citation: CrowdStrike 2015 Global Threat Report) (Citation: CrySyS Blog TeamSpy)",
    "url": "https://attack.mitre.org/techniques/T1219",
    "detection": "Monitor for applications and processes related to remote admin tools. Correlate activity with other suspicious behavior that may reduce false positives if these tools are used by legitimate users and administrators.\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.\n<a href=\"https://attack.mitre.org/techniques/T1090/004\">Domain Fronting</a> may be used in conjunction to avoid defenses. Adversaries will likely need to deploy and/or install these remote tools to compromised systems. It may be possible to detect or prevent the installation of these tools with host-based solutions.",
    "score": 1.7399708525390474,
    "process_score": 0.2,
    "file_score": 0.2,
    "cloud_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 17,
    "tid": "T1190",
    "name": "Exploit Public-Facing Application",
    "description": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), network device administration and management protocols (like SNMP and Smart Install(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include <a href=\"https://attack.mitre.org/techniques/T1211\">Exploitation for Defense Evasion</a>. \nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via <a href=\"https://attack.mitre.org/techniques/T1611\">Escape to Host</a>, or take advantage of weak identity and access management policies.\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
    "url": "https://attack.mitre.org/techniques/T1190",
    "detection": "Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.",
    "score": 1.6976671798609522,
    "network_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1016",
        "name": "Vulnerability Scanning",
        "description": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
        "url": "https://attack.mitre.org/mitigations/M1016"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
        "url": "https://attack.mitre.org/mitigations/M1048"
      },
      {
        "mid": "M1050",
        "name": "Exploit Protection",
        "description": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
        "url": "https://attack.mitre.org/mitigations/M1050"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 18,
    "tid": "T1547",
    "name": "Boot or Logon Autostart Execution",
    "description": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming)  These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel.\nSince some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.",
    "url": "https://attack.mitre.org/techniques/T1547",
    "detection": "Monitor for additions or modifications of mechanisms that could be used to trigger autostart execution, such as relevant additions to the Registry. Look for changes that are not correlated with known updates, patches, or other planned administrative activity. Tools such as Sysinternals Autoruns may also be used to detect system autostart configuration changes that could be attempts at persistence.(Citation: TechNet Autoruns)  Changes to some autostart configuration settings may happen under normal conditions when legitimate software is installed. \nSuspicious program execution as autostart programs may show up as outlier processes that have not been seen before when compared against historical data.To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL.\nMonitor for abnormal usage of utilities and command-line parameters involved in kernel modification or driver installation.",
    "score": 1.676913729078095,
    "process_score": 0.2,
    "file_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1547.006",
        "name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions",
        "description": "Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming) \nWhen used maliciously, LKMs can be a type of kernel-mode <a href=\"https://attack.mitre.org/techniques/T1014\">Rootkit</a> that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide) Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)\nKernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through kextload and kextunload commands. Since macOS Catalina 10.15, kernel extensions have been deprecated on macOS systems.(Citation: Apple Kernel Extension Deprecation)\nAdversaries can use LKMs and kexts to covertly persist on a system and elevate privileges. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)(Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken)(Citation: Securelist Ventir) (Citation: Trend Micro Skidmap)",
        "url": "https://attack.mitre.org/techniques/T1547/006",
        "detection": "Loading, unloading, and manipulating modules on Linux systems can be detected by monitoring for the following commands: modprobe, insmod, lsmod, rmmod, or modinfo (Citation: Linux Loadable Kernel Module Insert and Remove LKMs) LKMs are typically loaded into /lib/modules and have had the extension .ko (\"kernel object\") since version 2.6 of the Linux kernel. (Citation: Wikipedia Loadable Kernel Module)\nAdversaries may run commands on the target system before loading a malicious module in order to ensure that it is properly compiled. (Citation: iDefense Rootkit Overview) Adversaries may also execute commands to identify the exact version of the running Linux kernel and/or download multiple versions of the same .ko (kernel object) files to use the one appropriate for the running system.(Citation: Trend Micro Skidmap) Many LKMs require Linux headers (specific to the target kernel) in order to compile properly. These are typically obtained through the operating systems package manager and installed like a normal package. On Ubuntu and Debian based systems this can be accomplished by running: apt-get install linux-headers-$(uname -r) On RHEL and CentOS based systems this can be accomplished by running: yum install kernel-devel-$(uname -r)\nOn macOS, monitor for execution of kextload commands and user installed kernel extensions performing abnormal and/or potentially malicious activity (such as creating network connections). Monitor for new rows added in the kext_policy table. KextPolicy stores a list of user approved (non Apple) kernel extensions and a partial history of loaded kernel modules in a SQLite database, /var/db/SystemPolicyConfiguration/KextPolicy.(Citation: User Approved Kernel Extension Pike’s)(Citation: Purves Kextpocalypse 2)(Citation: Apple Developer Configuration Profile)",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1038",
            "name": "Execution Prevention",
            "description": "Block execution of code on a system through application control, and/or script blocking.",
            "url": "https://attack.mitre.org/mitigations/M1038"
          },
          {
            "mid": "M1049",
            "name": "Antivirus/Antimalware",
            "description": "Use signatures or heuristics to detect malicious software.",
            "url": "https://attack.mitre.org/mitigations/M1049"
          }
        ]
      },
      {
        "tid": "T1547.013",
        "name": "Boot or Logon Autostart Execution: XDG Autostart Entries",
        "description": "Adversaries may modify XDG autostart entries to execute programs or commands during system boot. Linux desktop environments that are XDG compliant implement functionality for XDG autostart entries. These entries will allow an application to automatically start during the startup of a desktop environment after user logon. By default, XDG autostart entries are stored within the /etc/xdg/autostart or ~/.config/autostart directories and have a .desktop file extension.(Citation: Free Desktop Application Autostart Feb 2006)\nWithin an XDG autostart entry file, the Type key specifies if the entry is an application (type 1), link (type 2) or directory (type 3). The Name key indicates an arbitrary name assigned by the creator and the Exec key indicates the application and command line arguments to execute.(Citation: Free Desktop Entry Keys)\nAdversaries may use XDG autostart entries to maintain persistence by executing malicious commands and payloads, such as remote access tools, during the startup of a desktop environment. Commands included in XDG autostart entries with execute after user logon in the context of the currently logged on user. Adversaries may also use <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to make XDG autostart entries look as if they are associated with legitimate programs.",
        "url": "https://attack.mitre.org/techniques/T1547/013",
        "detection": "Malicious XDG autostart entries may be detected by auditing file creation and modification events within the /etc/xdg/autostart and ~/.config/autostart directories. Depending on individual configurations, defenders may need to query the environment variables $XDG_CONFIG_HOME or $XDG_CONFIG_DIRS to determine the paths of Autostart entries. Autostart entry files not associated with legitimate packages may be considered suspicious. Suspicious entries can also be identified by comparing entries to a trusted system baseline.\nSuspicious processes or scripts spawned in this manner will have a parent process of the desktop component implementing the XDG specification and will execute as the logged on user.",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1033",
            "name": "Limit Software Installation",
            "description": "Block users or groups from installing unapproved software.",
            "url": "https://attack.mitre.org/mitigations/M1033"
          }
        ]
      }
    ]
  },
  {
    "rank": 19,
    "tid": "T1552",
    "name": "Unsecured Credentials",
    "description": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. <a href=\"https://attack.mitre.org/techniques/T1552/003\">Bash History</a>), operating system or application-specific repositories (e.g. <a href=\"https://attack.mitre.org/techniques/T1552/002\">Credentials in Registry</a>), or other specialized files/artifacts (e.g. <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a>).",
    "url": "https://attack.mitre.org/techniques/T1552",
    "detection": "While detecting adversaries accessing credentials may be difficult without knowing they exist in the environment, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> for more information.\nMonitor for suspicious file access activity, specifically indications that a process is reading multiple files in a short amount of time and/or using command-line arguments  indicative of searching for credential material (ex: regex patterns). These may be indicators of automated/scripted credential access behavior.\nMonitoring when the user's .bash_history is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like cat ~/.bash_history.\nAdditionally, monitor processes for applications that can be used to query the Registry, such as <a href=\"https://attack.mitre.org/software/S0075\">Reg</a>, and collect command parameters that may indicate credentials are being searched. Correlate activity with related suspicious behavior that may indicate an active intrusion to reduce false positives.",
    "score": 1.6179315897971427,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1015",
        "name": "Active Directory Configuration",
        "description": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
        "url": "https://attack.mitre.org/mitigations/M1015"
      },
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1027",
        "name": "Password Policies",
        "description": "Set and enforce secure password policies for accounts.",
        "url": "https://attack.mitre.org/mitigations/M1027"
      },
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      },
      {
        "mid": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Protect sensitive information with strong encryption.",
        "url": "https://attack.mitre.org/mitigations/M1041"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1552.001",
        "name": "Unsecured Credentials: Credentials In Files",
        "description": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\nIt is possible to extract passwords from backups or saved virtual machines through <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)",
        "url": "https://attack.mitre.org/techniques/T1552/001",
        "detection": "While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> for more information.",
        "mitigations": [
          {
            "mid": "M1017",
            "name": "User Training",
            "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
            "url": "https://attack.mitre.org/mitigations/M1017"
          },
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          },
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      },
      {
        "tid": "T1552.003",
        "name": "Unsecured Credentials: Bash History",
        "description": "Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the \"history\" utility. Once a user logs out, the history is flushed to the user’s .bash_history file. For each user, this file resides at the same location: ~/.bash_history. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)",
        "url": "https://attack.mitre.org/techniques/T1552/003",
        "detection": "Monitoring when the user's .bash_history is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like \"history\" instead of commands like cat ~/.bash_history.",
        "mitigations": [
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          }
        ]
      },
      {
        "tid": "T1552.004",
        "name": "Unsecured Credentials: Private Keys",
        "description": "Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. \nAdversaries may also look in common key directories, such as ~/.ssh for SSH keys on * nix-based systems or C:&#92;Users&#92;(username)&#92;.ssh&#92; on Windows. These private keys can be used to authenticate to <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a> like SSH or for use in decrypting other collected files such as email.\nAdversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation: Palo Alto Prince of Persia)\nSome private keys require a password or passphrase for operation, so an adversary may also use <a href=\"https://attack.mitre.org/techniques/T1056\">Input Capture</a> for keylogging or attempt to <a href=\"https://attack.mitre.org/techniques/T1110\">Brute Force</a> the passphrase off-line.",
        "url": "https://attack.mitre.org/techniques/T1552/004",
        "detection": "Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          },
          {
            "mid": "M1041",
            "name": "Encrypt Sensitive Information",
            "description": "Protect sensitive information with strong encryption.",
            "url": "https://attack.mitre.org/mitigations/M1041"
          },
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      }
    ]
  },
  {
    "rank": 20,
    "tid": "T1095",
    "name": "Non-Application Layer Protocol",
    "description": "Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive.(Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL).\nICMP communication between hosts is one example.(Citation: Cisco Synful Knock Evolution)\n Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; (Citation: Microsoft ICMP) however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.",
    "url": "https://attack.mitre.org/techniques/T1095",
    "detection": "Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.(Citation: Cisco Blog Legacy Device Attacks)\nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2) \nMonitor and investigate API calls to functions associated with enabling and/or utilizing alternative communication channels.",
    "score": 1.6023809523809522,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 21,
    "tid": "T1074",
    "name": "Data Staged",
    "description": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as <a href=\"https://attack.mitre.org/techniques/T1560\">Archive Collected Data</a>. Interactive command shells may be used, and common functionality within <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> and bash may be used to copy data into a staging location.(Citation: PWC Cloud Hopper April 2017)\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may <a href=\"https://attack.mitre.org/techniques/T1578/002\">Create Cloud Instance</a> and stage data in that instance.(Citation: Mandiant M-Trends 2020)\nAdversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection.",
    "url": "https://attack.mitre.org/techniques/T1074",
    "detection": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 1.4679953248590476,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1074.001",
        "name": "Data Staged: Local Data Staging",
        "description": "Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as <a href=\"https://attack.mitre.org/techniques/T1560\">Archive Collected Data</a>. Interactive command shells may be used, and common functionality within <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> and bash may be used to copy data into a staging location.",
        "url": "https://attack.mitre.org/techniques/T1074/001",
        "detection": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
        "mitigations": []
      },
      {
        "tid": "T1074.002",
        "name": "Data Staged: Remote Data Staging",
        "description": "Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as <a href=\"https://attack.mitre.org/techniques/T1560\">Archive Collected Data</a>. Interactive command shells may be used, and common functionality within <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> and bash may be used to copy data into a staging location.\nIn cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may <a href=\"https://attack.mitre.org/techniques/T1578/002\">Create Cloud Instance</a> and stage data in that instance.(Citation: Mandiant M-Trends 2020)\nBy staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.",
        "url": "https://attack.mitre.org/techniques/T1074/002",
        "detection": "Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files, such as 7zip, RAR, ZIP, or zlib. Monitor publicly writeable directories, central locations, and commonly used staging directories (recycle bin, temp folders, etc.) to regularly check for compressed or encrypted data that may be indicative of staging.\nMonitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 22,
    "tid": "T1071",
    "name": "Application Layer Protocol",
    "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
    "url": "https://attack.mitre.org/techniques/T1071",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)",
    "score": 1.466974040025714,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1071.001",
        "name": "Application Layer Protocol: Web Protocols",
        "description": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nProtocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
        "url": "https://attack.mitre.org/techniques/T1071/001",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)\nMonitor for web traffic to/from known-bad or suspicious domains. ",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1071.002",
        "name": "Application Layer Protocol: File Transfer Protocols",
        "description": "Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nProtocols such as FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
        "url": "https://attack.mitre.org/techniques/T1071/002",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1071.003",
        "name": "Application Layer Protocol: Mail Protocols",
        "description": "Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nProtocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
        "url": "https://attack.mitre.org/techniques/T1071/003",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1071.004",
        "name": "Application Layer Protocol: DNS",
        "description": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: PAN DNS Tunneling)(Citation: Medium DnsTunneling) ",
        "url": "https://attack.mitre.org/techniques/T1071/004",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)\nMonitor for DNS traffic to/from known-bad or suspicious domains.",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          },
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      }
    ]
  },
  {
    "rank": 23,
    "tid": "T1068",
    "name": "Exploitation for Privilege Escalation",
    "description": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via <a href=\"https://attack.mitre.org/techniques/T1105\">Ingress Tool Transfer</a> or <a href=\"https://attack.mitre.org/techniques/T1570\">Lateral Tool Transfer</a>.",
    "url": "https://attack.mitre.org/techniques/T1068",
    "detection": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> for attempts to hide execution or evidence of Discovery. Consider monitoring for the presence or loading (ex: Sysmon Event ID 6) of known vulnerable drivers that adversaries may drop and exploit to execute code in kernel mode.(Citation: Microsoft Driver Block Rules)\nHigher privileges are often necessary to perform additional actions such as some methods of <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. Look for additional activity that may indicate an adversary has gained higher privileges.",
    "score": 1.4266641062647618,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1019",
        "name": "Threat Intelligence Program",
        "description": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
        "url": "https://attack.mitre.org/mitigations/M1019"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
        "url": "https://attack.mitre.org/mitigations/M1048"
      },
      {
        "mid": "M1050",
        "name": "Exploit Protection",
        "description": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
        "url": "https://attack.mitre.org/mitigations/M1050"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 24,
    "tid": "T1070",
    "name": "Indicator Removal on Host",
    "description": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as <a href=\"https://attack.mitre.org/techniques/T1552/003\">Bash History</a> and /var/log/*.\nThese actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.",
    "url": "https://attack.mitre.org/techniques/T1070",
    "detection": "File system monitoring may be used to detect improper deletion or modification of indicator files.  Events not stored on the file system may require different detection mechanisms.",
    "score": 1.3770079209523811,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1029",
        "name": "Remote Data Storage",
        "description": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
        "url": "https://attack.mitre.org/mitigations/M1029"
      },
      {
        "mid": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Protect sensitive information with strong encryption.",
        "url": "https://attack.mitre.org/mitigations/M1041"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1070.002",
        "name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
        "description": "Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the /var/log/ directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)\n<ul>\n<li>/var/log/messages:: General and system-related messages</li>\n<li>/var/log/secure or /var/log/auth.log: Authentication logs</li>\n<li>/var/log/utmp or /var/log/wtmp: Login records</li>\n<li>/var/log/kern.log: Kernel logs</li>\n<li>/var/log/cron.log: Crond logs</li>\n<li>/var/log/maillog: Mail server logs</li>\n<li>/var/log/httpd/: Web server access and error logs</li>\n</ul>",
        "url": "https://attack.mitre.org/techniques/T1070/002",
        "detection": "File system monitoring may be used to detect improper deletion or modification of indicator files. Also monitor for suspicious processes interacting with log files.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1029",
            "name": "Remote Data Storage",
            "description": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
            "url": "https://attack.mitre.org/mitigations/M1029"
          },
          {
            "mid": "M1041",
            "name": "Encrypt Sensitive Information",
            "description": "Protect sensitive information with strong encryption.",
            "url": "https://attack.mitre.org/mitigations/M1041"
          }
        ]
      },
      {
        "tid": "T1070.003",
        "name": "Indicator Removal on Host: Clear Command History",
        "description": "In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\nOn Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable HISTFILE. When a user logs off a system, this information is flushed to a file in the user's home directory called ~/.bash_history. The benefit of this is that it allows users to go back to commands they've used before in different sessions.\nAdversaries may delete their commands from these logs by manually clearing the history (history -c) or deleting the bash history file rm ~/.bash_history.\nOn Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the PSReadLine module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.\nThe PSReadLine command history tracks the commands used in all PowerShell sessions and writes them to a file ($env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)\nAdversaries may run the PowerShell command Clear-History to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the ConsoleHost_history.txt file. Adversaries may also delete the ConsoleHost_history.txt file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
        "url": "https://attack.mitre.org/techniques/T1070/003",
        "detection": "User authentication, especially via remote terminal services like SSH, without new entries in that user's ~/.bash_history is suspicious. Additionally, the removal/clearing of the ~/.bash_history file can be an indicator of suspicious activity.\nMonitor for suspicious modifications or deletion of ConsoleHost_history.txt and use of the Clear-History command.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1039",
            "name": "Environment Variable Permissions",
            "description": "Prevent modification of environment variables by unauthorized users and groups.",
            "url": "https://attack.mitre.org/mitigations/M1039"
          }
        ]
      },
      {
        "tid": "T1070.004",
        "name": "Indicator Removal on Host: File Deletion",
        "description": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)",
        "url": "https://attack.mitre.org/techniques/T1070/004",
        "detection": "It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.",
        "mitigations": []
      },
      {
        "tid": "T1070.006",
        "name": "Indicator Removal on Host: Timestomp",
        "description": "Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.\nTimestomping may be used along with file name <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)",
        "url": "https://attack.mitre.org/techniques/T1070/006",
        "detection": "Forensic techniques exist to detect aspects of files that have had their timestamps modified. (Citation: WindowsIR Anti-Forensic Techniques) It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 25,
    "tid": "T1189",
    "name": "Drive-by Compromise",
    "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring <a href=\"https://attack.mitre.org/techniques/T1550/001\">Application Access Token</a>.\nMultiple ways of delivering exploit code to a browser exist, including:\n<ul>\n<li>A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.</li>\n<li>Malicious ads are paid for and served through legitimate ad providers.</li>\n<li>Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).</li>\n</ul>\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)\nTypical drive-by compromise process:\n<ol>\n<li>A user visits a website that is used to host the adversary controlled content.</li>\n<li>Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. <ul>\n<li>The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.</li>\n</ul>\n</li>\n<li>Upon finding a vulnerable version, exploit code is delivered to the browser.</li>\n<li>If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.<ul>\n<li>In some cases a second visit to the website after the initial scan is required before exploit code is delivered.</li>\n</ul>\n</li>\n</ol>\nUnlike <a href=\"https://attack.mitre.org/techniques/T1190\">Exploit Public-Facing Application</a>, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to <a href=\"https://attack.mitre.org/techniques/T1528\">Steal Application Access Token</a>s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)",
    "url": "https://attack.mitre.org/techniques/T1189",
    "detection": "Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.\nNetwork intrusion detection systems, sometimes with SSL/TLS inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.\nDetecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.",
    "score": 1.3659335206476189,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "cloud_score": 0.2,
    "mitigations": [
      {
        "mid": "M1021",
        "name": "Restrict Web-Based Content",
        "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
        "url": "https://attack.mitre.org/mitigations/M1021"
      },
      {
        "mid": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
        "url": "https://attack.mitre.org/mitigations/M1048"
      },
      {
        "mid": "M1050",
        "name": "Exploit Protection",
        "description": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
        "url": "https://attack.mitre.org/mitigations/M1050"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 26,
    "tid": "T1560",
    "name": "Archive Collected Data",
    "description": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
    "url": "https://attack.mitre.org/techniques/T1560",
    "detection": "Archival software and archived files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.\nA process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures.\nConsider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citation: Wikipedia File Header Signatures)",
    "score": 1.3230527608038094,
    "process_score": 0.2,
    "file_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1560.001",
        "name": "Archive Collected Data: Archive via Utility",
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip(Citation: 7zip Homepage), WinRAR(Citation: WinRAR Homepage), and WinZip(Citation: WinZip Homepage). Most utilities include functionality to encrypt and/or compress data.\nSome 3rd party utilities may be preinstalled, such as tar on Linux and macOS or zip on Windows systems.",
        "url": "https://attack.mitre.org/techniques/T1560/001",
        "detection": "Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known archival utilities. This may yield a significant number of benign events, depending on how systems in the environment are typically used.\nConsider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citation: Wikipedia File Header Signatures)",
        "mitigations": [
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      },
      {
        "tid": "T1560.002",
        "name": "Archive Collected Data: Archive via Library",
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including <a href=\"https://attack.mitre.org/techniques/T1059/006\">Python</a> rarfile (Citation: PyPI RAR), libzip (Citation: libzip), and zlib (Citation: Zlib Github). Most libraries include functionality to encrypt and/or compress data.\nSome archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.",
        "url": "https://attack.mitre.org/techniques/T1560/002",
        "detection": "Monitor processes for accesses to known archival libraries. This may yield a significant number of benign events, depending on how systems in the environment are typically used.\nConsider detecting writing of files with extensions and/or headers associated with compressed or encrypted file types. Detection efforts may focus on follow-on exfiltration activity, where compressed or encrypted files can be detected in transit with a network intrusion detection or data loss prevention system analyzing file headers.(Citation: Wikipedia File Header Signatures)",
        "mitigations": []
      },
      {
        "tid": "T1560.003",
        "name": "Archive Collected Data: Archive via Custom Method",
        "description": "An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.(Citation: ESET Sednit Part 2)",
        "url": "https://attack.mitre.org/techniques/T1560/003",
        "detection": "Custom archival methods can be very difficult to detect, since many of them use standard programming language concepts, such as bitwise operations.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 27,
    "tid": "T1557",
    "name": "Adversary-in-the-Middle",
    "description": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as <a href=\"https://attack.mitre.org/techniques/T1040\">Network Sniffing</a> or <a href=\"https://attack.mitre.org/techniques/T1565/002\">Transmitted Data Manipulation</a>. By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions.(Citation: Rapid7 MiTM Basics)\nAdversaries may leverage the AiTM position to attempt to modify traffic, such as in <a href=\"https://attack.mitre.org/techniques/T1565/002\">Transmitted Data Manipulation</a>. Adversaries can also stop traffic from flowing to the appropriate destination, causing denial of service.",
    "url": "https://attack.mitre.org/techniques/T1557",
    "detection": "Monitor network traffic for anomalies associated with known AiTM behavior. Consider monitoring for modifications to system configuration files involved in shaping network traffic flow.",
    "score": 1.2908688518133333,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
        "url": "https://attack.mitre.org/mitigations/M1035"
      },
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      },
      {
        "mid": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Protect sensitive information with strong encryption.",
        "url": "https://attack.mitre.org/mitigations/M1041"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1557.002",
        "name": "Adversary-in-the-Middle: ARP Cache Poisoning",
        "description": "Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as <a href=\"https://attack.mitre.org/techniques/T1040\">Network Sniffing</a> or <a href=\"https://attack.mitre.org/techniques/T1565/002\">Transmitted Data Manipulation</a>.\nThe ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.\nAn adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.\nThe ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)\nAdversaries may use ARP cache poisoning as a means to intercept network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)",
        "url": "https://attack.mitre.org/techniques/T1557/002",
        "detection": "Monitor network traffic for unusual ARP traffic, gratuitous ARP replies may be suspicious. \nConsider collecting changes to ARP caches across endpoints for signs of ARP poisoning. For example, if multiple IP addresses map to a single MAC address, this could be an indicator that the ARP cache has been poisoned.",
        "mitigations": [
          {
            "mid": "M1017",
            "name": "User Training",
            "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
            "url": "https://attack.mitre.org/mitigations/M1017"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          },
          {
            "mid": "M1035",
            "name": "Limit Access to Resource Over Network",
            "description": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
            "url": "https://attack.mitre.org/mitigations/M1035"
          },
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          },
          {
            "mid": "M1041",
            "name": "Encrypt Sensitive Information",
            "description": "Protect sensitive information with strong encryption.",
            "url": "https://attack.mitre.org/mitigations/M1041"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      }
    ]
  },
  {
    "rank": 28,
    "tid": "T1570",
    "name": "Lateral Tool Transfer",
    "description": "Adversaries may transfer tools or other files between systems in a compromised environment. Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Adversaries may copy files laterally between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with <a href=\"https://attack.mitre.org/techniques/T1021/002\">SMB/Windows Admin Shares</a> or <a href=\"https://attack.mitre.org/techniques/T1021/001\">Remote Desktop Protocol</a>. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.",
    "url": "https://attack.mitre.org/techniques/T1570",
    "detection": "Monitor for file creation and files transferred within a network using protocols such as SMB. Unusual processes with internal network connections creating files on-system may be suspicious. Consider monitoring for abnormal usage of utilities and command-line arguments that may be used in support of remote transfer of files. Considering monitoring for alike file hashes or characteristics (ex: filename) that are created on multiple hosts.",
    "score": 1.2729806215885715,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 29,
    "tid": "T1210",
    "name": "Exploitation of Remote Services",
    "description": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through <a href=\"https://attack.mitre.org/techniques/T1046\">Network Service Scanning</a> or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services. (Citation: NVD CVE-2014-7169)\nDepending on the permissions level of the vulnerable remote service an adversary may achieve <a href=\"https://attack.mitre.org/techniques/T1068\">Exploitation for Privilege Escalation</a> as a result of lateral movement exploitation as well.",
    "url": "https://attack.mitre.org/techniques/T1210",
    "detection": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the processes. This could include suspicious files written to disk, evidence of <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.",
    "score": 1.2585666666666666,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1016",
        "name": "Vulnerability Scanning",
        "description": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
        "url": "https://attack.mitre.org/mitigations/M1016"
      },
      {
        "mid": "M1019",
        "name": "Threat Intelligence Program",
        "description": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
        "url": "https://attack.mitre.org/mitigations/M1019"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      },
      {
        "mid": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
        "url": "https://attack.mitre.org/mitigations/M1048"
      },
      {
        "mid": "M1050",
        "name": "Exploit Protection",
        "description": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
        "url": "https://attack.mitre.org/mitigations/M1050"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 30,
    "tid": "T1555",
    "name": "Credentials from Password Stores",
    "description": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
    "url": "https://attack.mitre.org/techniques/T1555",
    "detection": "Monitor system calls, file read events, and processes for suspicious activity that could indicate searching for a password  or other activity related to performing keyword searches (e.g. password, pwd, login, store, secure, credentials, etc.) in process memory for credentials. File read events should be monitored surrounding known password storage applications.",
    "score": 1.2480607721104762,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1027",
        "name": "Password Policies",
        "description": "Set and enforce secure password policies for accounts.",
        "url": "https://attack.mitre.org/mitigations/M1027"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1555.002",
        "name": "Credentials from Password Stores: Securityd Memory",
        "description": "An adversary may obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.(Citation: OS X Keychain) (Citation: OSX Keydnap malware)\nIn OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. (Citation: OS X Keychain) (Citation: External to DA, the OS X Way) Apple’s securityd utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password.(Citation: OS X Keychain)",
        "url": "https://attack.mitre.org/techniques/T1555/002",
        "detection": "Monitor processes and command-line arguments for activity surrounded users searching for credentials or using automated tools to scan memory for passwords.",
        "mitigations": []
      },
      {
        "tid": "T1555.003",
        "name": "Credentials from Password Stores: Credentials from Web Browsers",
        "description": "Adversaries may acquire credentials from web browsers by reading files specific to the target browser.(Citation: Talos Olympic Destroyer 2018) Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.\nFor example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data and executing a SQL query: SELECT action_url, username_value, password_value FROM logins;. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function CryptUnprotectData, which uses the victim’s cached logon credentials as the decryption key. (Citation: Microsoft CryptUnprotectData April 2018)\nAdversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc.(Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017) Windows stores Internet Explorer and Microsoft Edge credentials in Credential Lockers managed by the <a href=\"https://attack.mitre.org/techniques/T1555/004\">Windows Credential Manager</a>.\nAdversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)\nAfter acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary's objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).",
        "url": "https://attack.mitre.org/techniques/T1555/003",
        "detection": "Identify web browser files that contain credentials such as Google Chrome’s Login Data database file: AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data. Monitor file read events of web browser files that contain credentials, especially when the reading process is unrelated to the subject web browser. Monitor process execution logs to include PowerShell Transcription focusing on those that perform a combination of behaviors including reading web browser process memory, utilizing regular expressions, and those that contain numerous keywords for common web applications (Gmail, Twitter, Office365, etc.).",
        "mitigations": [
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          }
        ]
      },
      {
        "tid": "T1555.005",
        "name": "Credentials from Password Stores: Password Managers",
        "description": "Adversaries may acquire user credentials from third-party password managers.(Citation: ise Password Manager February 2019) Password managers are applications designed to store user credentials, normally in an encrypted database. Credentials are typically accessible after a user provides a master password that unlocks the database. After the database is unlocked, these credentials may be copied to memory. These databases can be stored as files on disk.(Citation: ise Password Manager February 2019)\nAdversaries may acquire user credentials from password managers by extracting the master password and/or plain-text credentials from memory.(Citation: FoxIT Wocao December 2019)(Citation: Github KeeThief) Adversaries may extract credentials from memory via <a href=\"https://attack.mitre.org/techniques/T1212\">Exploitation for Credential Access</a>.(Citation: NVD CVE-2019-3610)\n Adversaries may also try brute forcing via <a href=\"https://attack.mitre.org/techniques/T1110/001\">Password Guessing</a> to obtain the master password of a password manager.(Citation: Cyberreason Anchor December 2019)",
        "url": "https://attack.mitre.org/techniques/T1555/005",
        "detection": "Consider monitoring API calls, file read events, and processes for suspicious activity that could indicate searching in process memory of password managers. \nConsider monitoring file reads surrounding known password manager applications.",
        "mitigations": [
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          },
          {
            "mid": "M1051",
            "name": "Update Software",
            "description": "Perform regular software updates to mitigate exploitation risk.",
            "url": "https://attack.mitre.org/mitigations/M1051"
          },
          {
            "mid": "M1054",
            "name": "Software Configuration",
            "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
            "url": "https://attack.mitre.org/mitigations/M1054"
          }
        ]
      }
    ]
  },
  {
    "rank": 31,
    "tid": "T1048",
    "name": "Exfiltration Over Alternative Protocol",
    "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  \nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. \n<a href=\"https://attack.mitre.org/techniques/T1048\">Exfiltration Over Alternative Protocol</a> can be done using various common operating system utilities such as <a href=\"https://attack.mitre.org/software/S0039\">Net</a>/SMB or FTP.(Citation: Palo Alto OilRig Oct 2016) On macOS and Linux curl may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system.(Citation: 20 macOS Common Tools and Techniques) ",
    "url": "https://attack.mitre.org/techniques/T1048",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
    "score": 1.2468289257580951,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      },
      {
        "mid": "M1057",
        "name": "Data Loss Prevention",
        "description": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data Loss Prevention)",
        "url": "https://attack.mitre.org/mitigations/M1057"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1048.001",
        "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
        "description": "Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \nSymmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. \nNetwork protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP). ",
        "url": "https://attack.mitre.org/techniques/T1048/001",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citation: University of Birmingham C2) \nArtifacts and evidence of symmetric key exchange may be recoverable by analyzing network traffic or looking for hard-coded values within malware. If recovered, these keys can be used to decrypt network data from command and control channels. ",
        "mitigations": [
          {
            "mid": "M1030",
            "name": "Network Segmentation",
            "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
            "url": "https://attack.mitre.org/mitigations/M1030"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          },
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      },
      {
        "tid": "T1048.002",
        "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
        "description": "Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \nAsymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. \nNetwork protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol. ",
        "url": "https://attack.mitre.org/techniques/T1048/002",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citation: University of Birmingham C2) ",
        "mitigations": [
          {
            "mid": "M1030",
            "name": "Network Segmentation",
            "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
            "url": "https://attack.mitre.org/mitigations/M1030"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          },
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          },
          {
            "mid": "M1057",
            "name": "Data Loss Prevention",
            "description": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data Loss Prevention)",
            "url": "https://attack.mitre.org/mitigations/M1057"
          }
        ]
      },
      {
        "tid": "T1048.003",
        "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
        "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields. ",
        "url": "https://attack.mitre.org/techniques/T1048/003",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2) ",
        "mitigations": [
          {
            "mid": "M1030",
            "name": "Network Segmentation",
            "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
            "url": "https://attack.mitre.org/mitigations/M1030"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          },
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          },
          {
            "mid": "M1057",
            "name": "Data Loss Prevention",
            "description": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data Loss Prevention)",
            "url": "https://attack.mitre.org/mitigations/M1057"
          }
        ]
      }
    ]
  },
  {
    "rank": 32,
    "tid": "T1072",
    "name": "Software Deployment Tools",
    "description": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).\nAccess to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.\nThe permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose.",
    "url": "https://attack.mitre.org/techniques/T1072",
    "detection": "Detection methods will vary depending on the type of third-party software or system and how it is typically used. \nThe same investigation process can be applied here as with other potentially malicious activities where the distribution vector is initially unknown but the resulting activity follows a discernible pattern. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file/binary/script pushed to systems. \nOften these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Ensure that third-party application logs are on-boarded to the enterprise logging system and the logs are regularly reviewed. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious. Monitor account login activity on these applications to detect suspicious/abnormal usage.\nPerform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.",
    "score": 1.2430957116790475,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1015",
        "name": "Active Directory Configuration",
        "description": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
        "url": "https://attack.mitre.org/mitigations/M1015"
      },
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1027",
        "name": "Password Policies",
        "description": "Set and enforce secure password policies for accounts.",
        "url": "https://attack.mitre.org/mitigations/M1027"
      },
      {
        "mid": "M1029",
        "name": "Remote Data Storage",
        "description": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
        "url": "https://attack.mitre.org/mitigations/M1029"
      },
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 33,
    "tid": "T1564",
    "name": "Hide Artifacts",
    "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection.(Citation: Sofacy Komplex Trojan)(Citation: Cybereason OSX Pirrit)(Citation: MalwareBytes ADS July 2015)\nAdversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology.(Citation: Sophos Ragnar May 2020)",
    "url": "https://attack.mitre.org/techniques/T1564",
    "detection": "Monitor files, processes, and command-line arguments for actions indicative of hidden artifacts. Monitor event and authentication logs for records of hidden artifacts being used. Monitor the file system and shell commands for hidden attribute usage.",
    "score": 1.2414746828571428,
    "network_score": 0.2,
    "process_score": 0.2,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1564.001",
        "name": "Hide Artifacts: Hidden Files and Directories",
        "description": "Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (dir /a for Windows and ls –a for Linux and macOS).\nOn Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable.\nFiles on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker). On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.\nAdversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.",
        "url": "https://attack.mitre.org/techniques/T1564/001",
        "detection": "Monitor the file system and shell commands for files being created with a leading \".\" and the Windows command-line use of attrib.exe to add the hidden attribute.",
        "mitigations": []
      },
      {
        "tid": "T1564.005",
        "name": "Hide Artifacts: Hidden File System",
        "description": "Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.(Citation: MalwareTech VFS Nov 2014)\nAdversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.(Citation: MalwareTech VFS Nov 2014)(Citation: FireEye Bootkits) Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.(Citation: ESET ComRAT May 2020) Adversaries may also fragment files across the existing file system structure in non-standard ways.(Citation: Kaspersky Equation QA)",
        "url": "https://attack.mitre.org/techniques/T1564/005",
        "detection": "Detecting the use of a hidden file system may be exceptionally difficult depending on the implementation. Emphasis may be placed on detecting related aspects of the adversary lifecycle, such as how malware interacts with the hidden file system or how a hidden file system is loaded. Consider looking for anomalous interactions with the Registry or with a particular file on disk. Likewise, if the hidden file system is loaded on boot from reserved disk space, consider shifting focus to detecting <a href=\"https://attack.mitre.org/techniques/T1542/003\">Bootkit</a> activity.",
        "mitigations": []
      },
      {
        "tid": "T1564.006",
        "name": "Hide Artifacts: Run Virtual Instance",
        "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.(Citation: SingHealth Breach Jan 2019)\nAdversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.(Citation: Sophos Ragnar May 2020)",
        "url": "https://attack.mitre.org/techniques/T1564/006",
        "detection": "Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines.(Citation: Shadowbunny VM Defense Evasion) Network adapter information may also be helpful in detecting the use of virtual instances.\nConsider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. -silent, -ignore-reboot), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. VBoxManage startvm $VM --type headless).(Citation: Shadowbunny VM Defense Evasion) Similarly, monitoring command line arguments which suppress notifications may highlight potentially malicious activity (ex. VBoxManage.exe setextradata global GUI/SuppressMessages \"all\").\nMonitor for commands which enable hypervisors such as Hyper-V.  If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for <a href=\"https://attack.mitre.org/techniques/T1543/003\">Windows Service</a>, with respect to virtualization software. \nBenign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.",
        "mitigations": [
          {
            "mid": "M1038",
            "name": "Execution Prevention",
            "description": "Block execution of code on a system through application control, and/or script blocking.",
            "url": "https://attack.mitre.org/mitigations/M1038"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      },
      {
        "tid": "T1564.007",
        "name": "Hide Artifacts: VBA Stomping",
        "description": "Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.(Citation: FireEye VBA stomp Feb 2020)\nMS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a PerformanceCache that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the _VBA_PROJECT stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.(Citation: Evil Clippy May 2019)(Citation: Microsoft _VBA_PROJECT Stream)\nAn adversary may hide malicious VBA code by overwriting the VBA source code location with zero’s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the _VBA_PROJECT stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.(Citation: Walmart Roberts Oct 2018)(Citation: FireEye VBA stomp Feb 2020)(Citation: pcodedmp Bontchev)",
        "url": "https://attack.mitre.org/techniques/T1564/007",
        "detection": "Detection efforts should be placed finding differences between VBA source code and p-code.(Citation: Walmart Roberts Oct 2018) VBA code can be extracted from p-code before execution with tools such as the pcodedmp disassembler. The oletools toolkit leverages the pcodedmp disassembler to detect VBA stomping by comparing keywords present in the VBA source code and p-code.(Citation: pcodedmp Bontchev)(Citation: oletools toolkit)\nIf the document is opened with a Graphical User Interface (GUI) the malicious p-code is decompiled and may be viewed. However, if the PROJECT stream, which specifies the project properties, is modified in a specific way the decompiled VBA code will not be displayed. For example, adding a module name that is undefined to the PROJECT stream will inhibit attempts of reading the VBA source code through the GUI.(Citation: FireEye VBA stomp Feb 2020)",
        "mitigations": [
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      },
      {
        "tid": "T1564.008",
        "name": "Hide Artifacts: Email Hiding Rules",
        "description": "Adversaries may use email rules to hide inbound emails in a compromised user's mailbox. Many email clients allow users to create inbox rules for various email functions, including moving emails to other folders, marking emails as read, or deleting emails. Rules may be created or modified within email clients or through external features such as the New-InboxRule or Set-InboxRule <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> cmdlets on Windows systems.(Citation: Microsoft Inbox Rules)(Citation: MacOS Email Rules)(Citation: Microsoft New-InboxRule)(Citation: Microsoft Set-InboxRule)\nAdversaries may utilize email rules within a compromised user's mailbox to delete and/or move emails to less noticeable folders. Adversaries may do this to hide security alerts, C2 communication, or responses to <a href=\"https://attack.mitre.org/techniques/T1534\">Internal Spearphishing</a> emails sent from the compromised account.\nAny user or administrator within the organization (or adversary with valid credentials) may be able to create rules to automatically move or delete emails. These rules can be abused to impair/delay detection had the email content been immediately seen by a user or defender. Malicious rules commonly filter out emails based on key words (such as malware, suspicious, phish, and hack) found in message bodies and subject lines. (Citation: Microsoft Cloud App Security)",
        "url": "https://attack.mitre.org/techniques/T1564/008",
        "detection": "Monitor email clients and applications for suspicious activity, such as missing messages or abnormal configuration and/or log entries.\nOn Windows systems, monitor for creation of suspicious inbox rules through the use of the New-InboxRule and Set-InboxRule PowerShell cmdlets.(Citation: Microsoft BEC Campaign) On MacOS systems, monitor for modifications to the RulesActiveState.plist, SyncedRules.plist, UnsyncedRules.plist, and MessageRules.plist files.(Citation: MacOS Email Rules)",
        "mitigations": [
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      }
    ]
  },
  {
    "rank": 34,
    "tid": "T1110",
    "name": "Brute Force",
    "description": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes.\nBrute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>, <a href=\"https://attack.mitre.org/techniques/T1087\">Account Discovery</a>, or <a href=\"https://attack.mitre.org/techniques/T1201\">Password Policy Discovery</a>. Adversaries may also combine brute forcing activity with behaviors such as <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> as part of Initial Access.",
    "url": "https://attack.mitre.org/techniques/T1110",
    "detection": "Monitor authentication logs for system and application login failures of <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials. Also monitor for many failed authentication attempts across various accounts that may result from password spraying attempts. It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network.",
    "score": 1.2097880058714285,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1027",
        "name": "Password Policies",
        "description": "Set and enforce secure password policies for accounts.",
        "url": "https://attack.mitre.org/mitigations/M1027"
      },
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      },
      {
        "mid": "M1036",
        "name": "Account Use Policies",
        "description": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
        "url": "https://attack.mitre.org/mitigations/M1036"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1110.001",
        "name": "Brute Force: Password Guessing",
        "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n<ul>\n<li>SSH (22/TCP)</li>\n<li>Telnet (23/TCP)</li>\n<li>FTP (21/TCP)</li>\n<li>NetBIOS / SMB / Samba (139/TCP &amp; 445/TCP)</li>\n<li>LDAP (389/TCP)</li>\n<li>Kerberos (88/TCP)</li>\n<li>RDP / Terminal Services (3389/TCP)</li>\n<li>HTTP/HTTP Management Services (80/TCP &amp; 443/TCP)</li>\n<li>MSSQL (1433/TCP)</li>\n<li>Oracle (1521/TCP)</li>\n<li>MySQL (3306/TCP)</li>\n<li>VNC (5900/TCP)</li>\n</ul>\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
        "url": "https://attack.mitre.org/techniques/T1110/001",
        "detection": "Monitor authentication logs for system and application login failures of <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.",
        "mitigations": [
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          },
          {
            "mid": "M1032",
            "name": "Multi-factor Authentication",
            "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
            "url": "https://attack.mitre.org/mitigations/M1032"
          },
          {
            "mid": "M1036",
            "name": "Account Use Policies",
            "description": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
            "url": "https://attack.mitre.org/mitigations/M1036"
          }
        ]
      },
      {
        "tid": "T1110.002",
        "name": "Brute Force: Password Cracking",
        "description": "Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> is used to obtain password hashes, this may only get an adversary so far when <a href=\"https://attack.mitre.org/techniques/T1550/002\">Pass the Hash</a> is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.",
        "url": "https://attack.mitre.org/techniques/T1110/002",
        "detection": "It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network. Consider focusing efforts on detecting other adversary behavior used to acquire credential materials, such as <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> or <a href=\"https://attack.mitre.org/techniques/T1558/003\">Kerberoasting</a>.",
        "mitigations": [
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          },
          {
            "mid": "M1032",
            "name": "Multi-factor Authentication",
            "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
            "url": "https://attack.mitre.org/mitigations/M1032"
          }
        ]
      },
      {
        "tid": "T1110.003",
        "name": "Brute Force: Password Spraying",
        "description": "Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. 'Password01'), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)\nTypically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:\n<ul>\n<li>SSH (22/TCP)</li>\n<li>Telnet (23/TCP)</li>\n<li>FTP (21/TCP)</li>\n<li>NetBIOS / SMB / Samba (139/TCP &amp; 445/TCP)</li>\n<li>LDAP (389/TCP)</li>\n<li>Kerberos (88/TCP)</li>\n<li>RDP / Terminal Services (3389/TCP)</li>\n<li>HTTP/HTTP Management Services (80/TCP &amp; 443/TCP)</li>\n<li>MSSQL (1433/TCP)</li>\n<li>Oracle (1521/TCP)</li>\n<li>MySQL (3306/TCP)</li>\n<li>VNC (5900/TCP)</li>\n</ul>\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
        "url": "https://attack.mitre.org/techniques/T1110/003",
        "detection": "Monitor authentication logs for system and application login failures of <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>. Specifically, monitor for many failed authentication attempts across various accounts that may result from password spraying attempts.\nConsider the following event IDs:(Citation: Trimarc Detecting Password Spraying)\n<ul>\n<li>Domain Controllers: \"Audit Logon\" (Success &amp; Failure) for event ID 4625.</li>\n<li>Domain Controllers: \"Audit Kerberos Authentication Service\" (Success &amp; Failure) for event ID 4771.</li>\n<li>All systems: \"Audit Logon\" (Success &amp; Failure) for event ID 4648.</li>\n</ul>",
        "mitigations": [
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          },
          {
            "mid": "M1032",
            "name": "Multi-factor Authentication",
            "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
            "url": "https://attack.mitre.org/mitigations/M1032"
          },
          {
            "mid": "M1036",
            "name": "Account Use Policies",
            "description": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
            "url": "https://attack.mitre.org/mitigations/M1036"
          }
        ]
      },
      {
        "tid": "T1110.004",
        "name": "Brute Force: Credential Stuffing",
        "description": "Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.\nCredential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies.\nTypically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:\n<ul>\n<li>SSH (22/TCP)</li>\n<li>Telnet (23/TCP)</li>\n<li>FTP (21/TCP)</li>\n<li>NetBIOS / SMB / Samba (139/TCP &amp; 445/TCP)</li>\n<li>LDAP (389/TCP)</li>\n<li>Kerberos (88/TCP)</li>\n<li>RDP / Terminal Services (3389/TCP)</li>\n<li>HTTP/HTTP Management Services (80/TCP &amp; 443/TCP)</li>\n<li>MSSQL (1433/TCP)</li>\n<li>Oracle (1521/TCP)</li>\n<li>MySQL (3306/TCP)</li>\n<li>VNC (5900/TCP)</li>\n</ul>\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)",
        "url": "https://attack.mitre.org/techniques/T1110/004",
        "detection": "Monitor authentication logs for system and application login failures of <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          },
          {
            "mid": "M1032",
            "name": "Multi-factor Authentication",
            "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
            "url": "https://attack.mitre.org/mitigations/M1032"
          },
          {
            "mid": "M1036",
            "name": "Account Use Policies",
            "description": "Configure features related to account use like login attempt lockouts, specific login times, etc.",
            "url": "https://attack.mitre.org/mitigations/M1036"
          }
        ]
      }
    ]
  },
  {
    "rank": 35,
    "tid": "T1213",
    "name": "Data from Information Repositories",
    "description": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. \nThe following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:\n<ul>\n<li>Policies, procedures, and standards</li>\n<li>Physical / logical network diagrams</li>\n<li>System architecture diagrams</li>\n<li>Technical system documentation</li>\n<li>Testing / development credentials</li>\n<li>Work / project schedules</li>\n<li>Source code snippets</li>\n<li>Links to network shares and other internal resources</li>\n</ul>\nInformation stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as <a href=\"https://attack.mitre.org/techniques/T1213/002\">Sharepoint</a> and <a href=\"https://attack.mitre.org/techniques/T1213/001\">Confluence</a>, specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server.",
    "url": "https://attack.mitre.org/techniques/T1213",
    "detection": "As information repositories generally have a considerably large user base, detection of malicious use can be non-trivial. At minimum, access to information repositories performed by privileged users (for example, Active Directory Domain, Enterprise, or Schema Administrators) should be closely monitored and alerted upon, as these types of accounts should generally not be used to access information repositories. If the capability exists, it may be of value to monitor and alert on users that are retrieving and viewing a large number of documents and pages; this behavior may be indicative of programmatic means being used to retrieve all data within the repository. In environments with high-maturity, it may be possible to leverage User-Behavioral Analytics (UBA) platforms to detect and alert on user based anomalies.\nThe user access logging within Microsoft's SharePoint can be configured to report access to certain pages and documents. (Citation: Microsoft SharePoint Logging) Sharepoint audit logging can also be configured to report when a user shares a resource. (Citation: Sharepoint Sharing Events) The user access logging within Atlassian's Confluence can also be configured to report access to certain pages and documents through AccessLogFilter. (Citation: Atlassian Confluence Logging) Additional log storage and analysis infrastructure will likely be required for more robust detection capabilities. ",
    "score": 1.1647714285714286,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 36,
    "tid": "T1136",
    "name": "Create Account",
    "description": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.\nAccounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection.",
    "url": "https://attack.mitre.org/techniques/T1136",
    "detection": "Monitor for processes and command-line parameters associated with account creation, such as net user or useradd. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system and domain controller. (Citation: Microsoft User Creation Event) Perform regular audits of domain and local system accounts to detect suspicious accounts that may have been created by an adversary.\nCollect usage logs from cloud administrator accounts to identify unusual activity in the creation of new accounts and assignment of roles to those accounts. Monitor for accounts assigned to admin roles that go over a certain threshold of known admins.",
    "score": 1.1619405019857143,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1136.001",
        "name": "Create Account: Local Account",
        "description": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the net user /add command can be used to create a local account. On macOS systems the dscl -create command can be used to create a local account.\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "url": "https://attack.mitre.org/techniques/T1136/001",
        "detection": "Monitor for processes and command-line parameters associated with local account creation, such as net user /add , useradd , and dscl -create . Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system. (Citation: Microsoft User Creation Event) Perform regular audits of local system accounts to detect suspicious accounts that may have been created by an adversary.",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1032",
            "name": "Multi-factor Authentication",
            "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
            "url": "https://attack.mitre.org/mitigations/M1032"
          }
        ]
      },
      {
        "tid": "T1136.002",
        "name": "Create Account: Domain Account",
        "description": "Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the net user /add /domain command can be used to create a domain account.\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
        "url": "https://attack.mitre.org/techniques/T1136/002",
        "detection": "Monitor for processes and command-line parameters associated with domain account creation, such as net user /add /domain. Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows domain controller. (Citation: Microsoft User Creation Event) Perform regular audits of domain accounts to detect suspicious accounts that may have been created by an adversary.",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          },
          {
            "mid": "M1030",
            "name": "Network Segmentation",
            "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
            "url": "https://attack.mitre.org/mitigations/M1030"
          },
          {
            "mid": "M1032",
            "name": "Multi-factor Authentication",
            "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
            "url": "https://attack.mitre.org/mitigations/M1032"
          }
        ]
      }
    ]
  },
  {
    "rank": 37,
    "tid": "T1497",
    "name": "Virtualization/Sandbox Evasion",
    "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\nAdversaries may use several methods to accomplish <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)",
    "url": "https://attack.mitre.org/techniques/T1497",
    "detection": "Virtualization, sandbox, user activity, and related discovery techniques will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.",
    "score": 1.1188043226,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1497.001",
        "name": "Virtualization/Sandbox Evasion: System Checks",
        "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a>, <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>, <a href=\"https://attack.mitre.org/techniques/T1082\">System Information Discovery</a>, and <a href=\"https://attack.mitre.org/techniques/T1012\">Query Registry</a> to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)",
        "url": "https://attack.mitre.org/techniques/T1497/001",
        "detection": "Virtualization/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.",
        "mitigations": []
      },
      {
        "tid": "T1497.002",
        "name": "Virtualization/Sandbox Evasion: User Activity Based Checks",
        "description": "Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\nAdversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks (Citation: Sans Virtual Jan 2016) , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image to activate.(Citation: FireEye FIN7 April 2017) ",
        "url": "https://attack.mitre.org/techniques/T1497/002",
        "detection": "User activity-based checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. ",
        "mitigations": []
      },
      {
        "tid": "T1497.003",
        "name": "Virtualization/Sandbox Evasion: Time Based Evasion",
        "description": "Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.\nAdversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: <a href=\"https://attack.mitre.org/techniques/T1053\">Scheduled Task/Job</a>). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled <a href=\"https://attack.mitre.org/techniques/T1104\">Multi-Stage Channels</a> to avoid analysis and scrutiny.(Citation: Deloitte Environment Awareness)\nBenign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such as <a href=\"https://attack.mitre.org/software/S0097\">Ping</a>s, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.(Citation: Revil Independence Day)(Citation: Netskope Nitol) Another variation, commonly referred to as API hammering, involves making various calls to <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a> functions in order to delay execution (while also potentially overloading analysis environments with junk data).(Citation: Joe Sec Nymaim)(Citation: Joe Sec Trickbot)\nAdversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.(Citation: ISACA Malware Tricks)",
        "url": "https://attack.mitre.org/techniques/T1497/003",
        "detection": "Time-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. ",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 38,
    "tid": "T1222",
    "name": "File and Directory Permissions Modification",
    "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\nModifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via <a href=\"https://attack.mitre.org/techniques/T1546/008\">Accessibility Features</a>, <a href=\"https://attack.mitre.org/techniques/T1037\">Boot or Logon Initialization Scripts</a>, <a href=\"https://attack.mitre.org/techniques/T1546/004\">Unix Shell Configuration Modification</a>, or tainting/hijacking other instrumental binary/configuration files via <a href=\"https://attack.mitre.org/techniques/T1574\">Hijack Execution Flow</a>.",
    "url": "https://attack.mitre.org/techniques/T1222",
    "detection": "Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\nConsider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.(Citation: EventTracker File Permissions Feb 2014)",
    "score": 1.1114032758828571,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1222.002",
        "name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
        "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\nMost Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform’s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: chown (short for change owner), and chmod (short for change mode).\nAdversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via <a href=\"https://attack.mitre.org/techniques/T1546/004\">Unix Shell Configuration Modification</a> or tainting/hijacking other instrumental binary/configuration files via <a href=\"https://attack.mitre.org/techniques/T1574\">Hijack Execution Flow</a>.(Citation: 20 macOS Common Tools and Techniques) ",
        "url": "https://attack.mitre.org/techniques/T1222/002",
        "detection": "Monitor and investigate attempts to modify ACLs and file/directory ownership. Many of the commands used to modify ACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Commonly abused command arguments include chmod +x, chmod -R 755, and chmod 777.(Citation: 20 macOS Common Tools and Techniques) \nConsider enabling file/directory permission change auditing on folders containing key binary/configuration files.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          }
        ]
      }
    ]
  },
  {
    "rank": 39,
    "tid": "T1106",
    "name": "Native API",
    "description": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\nNative API functions (such as NtCreateProcess) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. (Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API CreateProcess() or GNU fork() will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to <a href=\"https://attack.mitre.org/techniques/T1059\">Command and Scripting Interpreter</a>, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system. While invoking API functions, adversaries may also attempt to bypass defensive tools (ex: unhooking monitored functions via <a href=\"https://attack.mitre.org/techniques/T1562/001\">Disable or Modify Tools</a>).",
    "url": "https://attack.mitre.org/techniques/T1106",
    "detection": "Monitoring API calls may generate a significant amount of data and may not be useful for defense unless collected under specific circumstances, since benign use of API functions are common and may be difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient. \nUtilization of the Windows APIs may involve processes loading/accessing system DLLs associated with providing called functions (ex: ntdll.dll, kernel32.dll, advapi32.dll, user32.dll, and gdi32.dll). Monitoring for DLL loads, especially to abnormal/unusual or potentially malicious processes, may indicate abuse of the Windows API. Though noisy, this data can be combined with other indicators to identify adversary activity. ",
    "score": 1.1051660342857144,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
        "url": "https://attack.mitre.org/mitigations/M1040"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 40,
    "tid": "T1546",
    "name": "Event Triggered Execution",
    "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. \nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. ",
    "url": "https://attack.mitre.org/techniques/T1546",
    "detection": "Monitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. \nThese mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and/or specific named files, the last of which can be hashed and compared to known good values. \nMonitor for processes, API/System calls, and other common ways of manipulating these event repositories. \nTools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  \nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. ",
    "score": 1.0774153940638094,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1546.004",
        "name": "Event Triggered Execution: Unix Shell Configuration Modification",
        "description": "Adversaries may establish persistence through executing malicious commands triggered by a user’s shell. User <a href=\"https://attack.mitre.org/techniques/T1059/004\">Unix Shell</a>s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user’s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the /etc/profile and /etc/profile.d files.(Citation: intezer-kaiji-malware)(Citation: bencane blog bashrc) These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into ~/.bash_profile, ~/.bash_login, or ~/.profile which are sourced when a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation: Linux manual bash invocation) Since the system only executes the first existing file in the listed order, adversaries have used ~/.bash_profile to ensure execution. Adversaries have also leveraged the ~/.bashrc file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation: Magento) Some malware targets the termination of a program to trigger execution, adversaries can use the ~/.bash_logout file to execute malicious commands at the end of a session. \nFor macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using /etc/profile, /etc/zshenv, /etc/zprofile, and /etc/zlogin.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation: code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login shell then configures the user environment with ~/.zprofile and ~/.zlogin. The interactive shell uses the ~/.zshrc to configure the user environment. Upon exiting, /etc/zlogout and ~/.zlogout are executed. For legacy programs, macOS executes /etc/bashrc on startup.",
        "url": "https://attack.mitre.org/techniques/T1546/004",
        "detection": "While users may customize their shell profile files, there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.\nMonitor for changes to /etc/profile and /etc/profile.d, these files should only be modified by system administrators. MacOS users can leverage Endpoint Security Framework file events monitoring these specific files.(Citation: ESF_filemonitor) \nFor most Linux and macOS systems, a list of file paths for valid shell options available on a system are located in the /etc/shells file.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          }
        ]
      },
      {
        "tid": "T1546.005",
        "name": "Event Triggered Execution: Trap",
        "description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like ctrl+c and ctrl+d.\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)",
        "url": "https://attack.mitre.org/techniques/T1546/005",
        "detection": "Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 41,
    "tid": "T1046",
    "name": "Network Service Scanning",
    "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system. \nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.",
    "url": "https://attack.mitre.org/techniques/T1046",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nNormal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.",
    "score": 1.0751992322209523,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 42,
    "tid": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as <a href=\"https://attack.mitre.org/techniques/T1557/001\">LLMNR/NBT-NS Poisoning and SMB Relay</a>, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.",
    "url": "https://attack.mitre.org/techniques/T1040",
    "detection": "Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a <a href=\"https://attack.mitre.org/techniques/T1557\">Adversary-in-the-Middle</a> attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.",
    "score": 1.039830575535238,
    "network_score": 0.2,
    "process_score": 0.2,
    "cloud_score": 0.2,
    "mitigations": [
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      },
      {
        "mid": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Protect sensitive information with strong encryption.",
        "url": "https://attack.mitre.org/mitigations/M1041"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 43,
    "tid": "T1133",
    "name": "External Remote Services",
    "description": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as <a href=\"https://attack.mitre.org/techniques/T1021/006\">Windows Remote Management</a> and <a href=\"https://attack.mitre.org/techniques/T1021/005\">VNC</a> can also be used externally.(Citation: MacOS VNC software for Remote Desktop)\nAccess to <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network.(Citation: Volexity Virtual Private Keylogging) Access to remote services may be used as a redundant or persistent access mechanism during an operation.\nAccess may also be gained through an exposed service that doesn’t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard.(Citation: Trend Micro Exposed Docker Server)(Citation: Unit 42 Hildegard Malware)",
    "url": "https://attack.mitre.org/techniques/T1133",
    "detection": "Follow best practices for detecting adversary use of <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours.\nWhen authentication is not required to access an exposed remote service, monitor for follow-on activities such as anomalous external use of the exposed API or application.",
    "score": 0.9989999999999999,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      },
      {
        "mid": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
        "url": "https://attack.mitre.org/mitigations/M1035"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 44,
    "tid": "T1558",
    "name": "Steal or Forge Kerberos Tickets",
    "description": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable <a href=\"https://attack.mitre.org/techniques/T1550/003\">Pass the Ticket</a>. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as “realms”, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Attackers may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\nOn Windows, the built-in klist utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)\nLinux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.(Citation: MIT ccache) On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in /var/lib/sss/secrets/secrets.ldb as well as the corresponding key located in /var/lib/sss/secrets/.secrets.mkey. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for <a href=\"https://attack.mitre.org/techniques/T1550/003\">Pass the Ticket</a>. The ccache file may also be converted into a Windows format using tools such as Kekeo.(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)\nKerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the /etc/krb5.conf configuration file and the KRB5CCNAME environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using kinit, klist, ktutil, and kcc built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: macOS kerberos framework MIT)",
    "url": "https://attack.mitre.org/techniques/T1558",
    "detection": "Monitor for anomalous Kerberos activity, such as malformed or blank fields in Windows logon/logoff events (Event ID 4624, 4672, 4634), RC4 encryption within ticket granting tickets (TGTs), and ticket granting service (TGS) requests without preceding TGT requests.(Citation: ADSecurity Detecting Forged Tickets)(Citation: Stealthbits Detect PtT 2019)(Citation: CERT-EU Golden Ticket Protection)\nMonitor the lifetime of TGT tickets for values that differ from the default domain duration.(Citation: Microsoft Kerberos Golden Ticket)\nMonitor for indications of <a href=\"https://attack.mitre.org/techniques/T1550/003\">Pass the Ticket</a> being used to move laterally. \nEnable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).(Citation: Microsoft Detecting Kerberoasting Feb 2018) (Citation: AdSecurity Cracking Kerberos Dec 2015)\nMonitor for unexpected processes interacting with lsass.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as <a href=\"https://attack.mitre.org/software/S0002\">Mimikatz</a> access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details, including Kerberos tickets, are stored.\nMonitor for unusual processes accessing secrets.ldb and .secrets.mkey located in /var/lib/sss/secrets/.",
    "score": 0.9882515733333332,
    "process_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [
      {
        "mid": "M1015",
        "name": "Active Directory Configuration",
        "description": "Configure Active Directory to prevent use of certain techniques; use SID Filtering, etc.",
        "url": "https://attack.mitre.org/mitigations/M1015"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1027",
        "name": "Password Policies",
        "description": "Set and enforce secure password policies for accounts.",
        "url": "https://attack.mitre.org/mitigations/M1027"
      },
      {
        "mid": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Protect sensitive information with strong encryption.",
        "url": "https://attack.mitre.org/mitigations/M1041"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 45,
    "tid": "T1495",
    "name": "Firmware Corruption",
    "description": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot.(Citation: Symantec Chernobyl W95.CIH) Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices could include the motherboard, hard drive, or video cards.",
    "url": "https://attack.mitre.org/techniques/T1495",
    "detection": "System firmware manipulation may be detected.(Citation: MITRE Trustworthy Firmware Measurement) Log attempts to read/write to BIOS and compare against known patching behavior.",
    "score": 0.9736619047619046,
    "network_score": 0.2,
    "file_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1046",
        "name": "Boot Integrity",
        "description": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
        "url": "https://attack.mitre.org/mitigations/M1046"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 46,
    "tid": "T1490",
    "name": "Inhibit System Recovery",
    "description": "Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of <a href=\"https://attack.mitre.org/techniques/T1485\">Data Destruction</a> and <a href=\"https://attack.mitre.org/techniques/T1486\">Data Encrypted for Impact</a>.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017)\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n<ul>\n<li>vssadmin.exe can be used to delete all volume shadow copies on a system - vssadmin.exe delete shadows /all /quiet</li>\n<li><a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> can be used to delete volume shadow copies - wmic shadowcopy delete</li>\n<li>wbadmin.exe can be used to delete the Windows Backup Catalog - wbadmin.exe delete catalog -quiet</li>\n<li>bcdedit.exe can be used to disable automatic Windows recovery features by modifying boot configuration data - bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures &amp; bcdedit /set {default} recoveryenabled no</li>\n</ul>",
    "url": "https://attack.mitre.org/techniques/T1490",
    "detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in inhibiting system recovery, such as vssadmin, wbadmin, and bcdedit. The Windows event logs, ex. Event ID 524 indicating a system catalog was deleted, may contain entries associated with suspicious activity.\nMonitor the status of services involved in system recovery. Monitor the registry for changes associated with system recovery features (ex: the creation of HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\PreviousVersions\\DisableLocalPage).",
    "score": 0.9660842142857142,
    "network_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1053",
        "name": "Data Backup",
        "description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
        "url": "https://attack.mitre.org/mitigations/M1053"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 47,
    "tid": "T1571",
    "name": "Non-Standard Port",
    "description": "Adversaries may communicate using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
    "url": "https://attack.mitre.org/techniques/T1571",
    "detection": "Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.(Citation: University of Birmingham C2)",
    "score": 0.9659059482628571,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 48,
    "tid": "T1563",
    "name": "Remote Service Session Hijacking",
    "description": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service.\nAdversaries may commandeer these sessions to carry out actions on remote systems. <a href=\"https://attack.mitre.org/techniques/T1563\">Remote Service Session Hijacking</a> differs from use of <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a> because it hijacks an existing session rather than creating a new session using <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>.(Citation: RDP Hijacking Medium)(Citation: Breach Post-mortem SSH Hijack)",
    "url": "https://attack.mitre.org/techniques/T1563",
    "detection": "Use of these services may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with that service. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.\nMonitor for processes and command-line arguments associated with hijacking service sessions.",
    "score": 0.9479105557971428,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1563.001",
        "name": "Remote Service Session Hijacking: SSH Hijacking",
        "description": "Adversaries may hijack a legitimate user's SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.\nIn order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.(Citation: Slideshare Abusing SSH)(Citation: SSHjack Blackhat)(Citation: Clockwork SSH Agent Hijacking)(Citation: Breach Post-mortem SSH Hijack)\n<a href=\"https://attack.mitre.org/techniques/T1563/001\">SSH Hijacking</a> differs from use of <a href=\"https://attack.mitre.org/techniques/T1021/004\">SSH</a> because it hijacks an existing SSH session rather than creating a new session using <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>.",
        "url": "https://attack.mitre.org/techniques/T1563/001",
        "detection": "Use of SSH may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. Also monitor user SSH-agent socket files being used by different users.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1027",
            "name": "Password Policies",
            "description": "Set and enforce secure password policies for accounts.",
            "url": "https://attack.mitre.org/mitigations/M1027"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      }
    ]
  },
  {
    "rank": 49,
    "tid": "T1489",
    "name": "Service Stop",
    "description": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.(Citation: Talos Olympic Destroyer 2018)(Citation: Novetta Blockbuster) \nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as MSExchangeIS, which will make Exchange content inaccessible (Citation: Novetta Blockbuster). In some cases, adversaries may stop or disable many or all services to render systems unusable.(Citation: Talos Olympic Destroyer 2018) Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct <a href=\"https://attack.mitre.org/techniques/T1485\">Data Destruction</a> or <a href=\"https://attack.mitre.org/techniques/T1486\">Data Encrypted for Impact</a> on the data stores of services like Exchange and SQL Server.(Citation: SecureWorks WannaCry Analysis)",
    "url": "https://attack.mitre.org/techniques/T1489",
    "detection": "Monitor processes and command-line arguments to see if critical processes are terminated or stop running.\nMonitor for edits for modifications to services and startup programs that correspond to services of high importance. Look for changes to services that do not correlate with known software, patch cycles, etc. Windows service information is stored in the Registry at HKLM\\SYSTEM\\CurrentControlSet\\Services. Systemd service unit files are stored within the /etc/systemd/system, /usr/lib/systemd/system/, and /home/.config/systemd/user/ directories, as well as associated symbolic links.\nAlterations to the service binary path or the service startup type changed to disabled may be suspicious.\nRemote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. For example, ChangeServiceConfigW may be used by an adversary to prevent services from starting.(Citation: Talos Olympic Destroyer 2018)",
    "score": 0.9167605514285713,
    "network_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1024",
        "name": "Restrict Registry Permissions",
        "description": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
        "url": "https://attack.mitre.org/mitigations/M1024"
      },
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 50,
    "tid": "T1539",
    "name": "Steal Web Session Cookie",
    "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a malicious proxy (ex: <a href=\"https://attack.mitre.org/techniques/T1557\">Adversary-in-the-Middle</a>) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\nAfter an adversary acquires a valid cookie, they can then perform a <a href=\"https://attack.mitre.org/techniques/T1550/004\">Web Session Cookie</a> technique to login to the corresponding web application.",
    "url": "https://attack.mitre.org/techniques/T1539",
    "detection": "Monitor for attempts to access files and repositories on a local system that are used to store browser session cookies. Monitor for attempts by programs to inject into or dump browser process memory.",
    "score": 0.9162809523809523,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      },
      {
        "mid": "M1054",
        "name": "Software Configuration",
        "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
        "url": "https://attack.mitre.org/mitigations/M1054"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 51,
    "tid": "T1566",
    "name": "Phishing",
    "description": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.",
    "url": "https://attack.mitre.org/techniques/T1566",
    "detection": "Network intrusion detection systems and email gateways can be used to detect phishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.\nFiltering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)\nURL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.\nBecause most common third-party services used for phishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware.\nAnti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Many possible detections of follow-on behavior may take place once <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a> occurs.",
    "score": 0.9075467228752381,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1021",
        "name": "Restrict Web-Based Content",
        "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
        "url": "https://attack.mitre.org/mitigations/M1021"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1049",
        "name": "Antivirus/Antimalware",
        "description": "Use signatures or heuristics to detect malicious software.",
        "url": "https://attack.mitre.org/mitigations/M1049"
      },
      {
        "mid": "M1054",
        "name": "Software Configuration",
        "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
        "url": "https://attack.mitre.org/mitigations/M1054"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1566.001",
        "name": "Phishing: Spearphishing Attachment",
        "description": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a> to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
        "url": "https://attack.mitre.org/techniques/T1566/001",
        "detection": "Network intrusion detection systems and email gateways can be used to detect spearphishing with malicious attachments in transit. Detonation chambers may also be used to identify malicious attachments. Solutions can be signature and behavior based, but adversaries may construct attachments in a way to avoid these systems.\nFiltering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)\nAnti-virus can potentially detect malicious documents and attachments as they're scanned to be stored on the email server or on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the attachment is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as <a href=\"https://attack.mitre.org/techniques/T1203\">Exploitation for Client Execution</a> or usage of malicious scripts.\nMonitor for suspicious descendant process spawning from Microsoft Office and other productivity software.(Citation: Elastic - Koadiac Detection with EQL)",
        "mitigations": [
          {
            "mid": "M1017",
            "name": "User Training",
            "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
            "url": "https://attack.mitre.org/mitigations/M1017"
          },
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          },
          {
            "mid": "M1049",
            "name": "Antivirus/Antimalware",
            "description": "Use signatures or heuristics to detect malicious software.",
            "url": "https://attack.mitre.org/mitigations/M1049"
          },
          {
            "mid": "M1054",
            "name": "Software Configuration",
            "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
            "url": "https://attack.mitre.org/mitigations/M1054"
          }
        ]
      },
      {
        "tid": "T1566.002",
        "name": "Phishing: Spearphishing Link",
        "description": "Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a>. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to <a href=\"https://attack.mitre.org/techniques/T1528\">Steal Application Access Token</a>s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)",
        "url": "https://attack.mitre.org/techniques/T1566/002",
        "detection": "URL inspection within email (including expanding shortened links) can help detect links leading to known malicious sites. Detonation chambers can be used to detect these links and either automatically go to these sites to determine if they're potentially malicious, or wait and capture the content if a user visits the link.\nFiltering based on DKIM+SPF or header analysis can help detect when the email sender is spoofed.(Citation: Microsoft Anti Spoofing)(Citation: ACSC Email Spoofing)\nBecause this technique usually involves user interaction on the endpoint, many of the possible detections take place once <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a> occurs.",
        "mitigations": [
          {
            "mid": "M1017",
            "name": "User Training",
            "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
            "url": "https://attack.mitre.org/mitigations/M1017"
          },
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1054",
            "name": "Software Configuration",
            "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
            "url": "https://attack.mitre.org/mitigations/M1054"
          }
        ]
      },
      {
        "tid": "T1566.003",
        "name": "Phishing: Spearphishing via Service",
        "description": "Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. \nAll forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target's interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that's running in an environment. The adversary can then send malicious links or attachments through these services.\nA common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it's something they were expecting. If the payload doesn't work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.",
        "url": "https://attack.mitre.org/techniques/T1566/003",
        "detection": "Because most common third-party services used for spearphishing via service leverage TLS encryption, SSL/TLS inspection is generally required to detect the initial communication/delivery. With SSL/TLS inspection intrusion detection signatures or other security gateway appliances may be able to detect malware. \nAnti-virus can potentially detect malicious documents and files that are downloaded on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning Powershell.exe) for techniques such as <a href=\"https://attack.mitre.org/techniques/T1203\">Exploitation for Client Execution</a> or usage of malicious scripts.",
        "mitigations": [
          {
            "mid": "M1017",
            "name": "User Training",
            "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
            "url": "https://attack.mitre.org/mitigations/M1017"
          },
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1049",
            "name": "Antivirus/Antimalware",
            "description": "Use signatures or heuristics to detect malicious software.",
            "url": "https://attack.mitre.org/mitigations/M1049"
          }
        ]
      }
    ]
  },
  {
    "rank": 52,
    "tid": "T1018",
    "name": "Remote System Discovery",
    "description": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  <a href=\"https://attack.mitre.org/software/S0097\">Ping</a> or net view using <a href=\"https://attack.mitre.org/software/S0039\">Net</a>. Adversaries may also use local host files (ex: C:\\Windows\\System32\\Drivers\\etc\\hosts or /etc/hosts) in order to discover the hostname to IP address mappings of remote systems. ",
    "url": "https://attack.mitre.org/techniques/T1018",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nNormal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.\nMonitor for processes that can be used to discover remote systems, such as ping.exe and tracert.exe, especially when executed in quick succession.(Citation: Elastic - Koadiac Detection with EQL)",
    "score": 0.9028828804533333,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 53,
    "tid": "T1033",
    "name": "System Owner/User Discovery",
    "description": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from <a href=\"https://attack.mitre.org/techniques/T1033\">System Owner/User Discovery</a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nVarious utilities and commands may acquire this information, including whoami. In macOS and Linux, the currently logged in user can be identified with w and who. On macOS the dscl . list /Users | grep -v '_' command can also be used to enumerate user accounts. Environment variables, such as %USERNAME% and $USER, may also be used to access this information.",
    "url": "https://attack.mitre.org/techniques/T1033",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.8997925136628571,
    "process_score": 0.2,
    "file_score": 0.2,
    "cloud_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 54,
    "tid": "T1104",
    "name": "Multi-Stage Channels",
    "description": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.\nRemote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.\nThe different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or <a href=\"https://attack.mitre.org/techniques/T1008\">Fallback Channels</a> in case the original first-stage communication path is discovered and blocked.",
    "url": "https://attack.mitre.org/techniques/T1104",
    "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from Discovery of the system and network information or Lateral Movement to the originating process may also yield useful data.",
    "score": 0.89965205016,
    "process_score": 0.2,
    "file_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 55,
    "tid": "T1542",
    "name": "Pre-OS Boot",
    "description": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control.(Citation: Wikipedia Booting)\nAdversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses.",
    "url": "https://attack.mitre.org/techniques/T1542",
    "detection": "Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes. Take snapshots of boot records and firmware and compare against known good images. Log changes to boot records, BIOS, and EFI, which can be performed by API calls, and compare against known good behavior and patching.\nDisk check, forensic utilities, and data from device drivers (i.e. processes and API calls) may reveal anomalies that warrant deeper investigation. (Citation: ITWorld Hard Disk Health Dec 2014)",
    "score": 0.8971252238942857,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1046",
        "name": "Boot Integrity",
        "description": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
        "url": "https://attack.mitre.org/mitigations/M1046"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1542.003",
        "name": "Pre-OS Boot: Bootkit",
        "description": "Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.\nA bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: Mandiant M Trends 2016) The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)\nThe MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.",
        "url": "https://attack.mitre.org/techniques/T1542/003",
        "detection": "Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1046",
            "name": "Boot Integrity",
            "description": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
            "url": "https://attack.mitre.org/mitigations/M1046"
          }
        ]
      }
    ]
  },
  {
    "rank": 56,
    "tid": "T1572",
    "name": "Protocol Tunneling",
    "description": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.(Citation: SSH Tunneling) \n<a href=\"https://attack.mitre.org/techniques/T1572\">Protocol Tunneling</a> may also be abused by adversaries during <a href=\"https://attack.mitre.org/techniques/T1568\">Dynamic Resolution</a>. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.(Citation: BleepingComp Godlua JUL19) \nAdversaries may also leverage <a href=\"https://attack.mitre.org/techniques/T1572\">Protocol Tunneling</a> in conjunction with <a href=\"https://attack.mitre.org/techniques/T1090\">Proxy</a> and/or <a href=\"https://attack.mitre.org/techniques/T1001/003\">Protocol Impersonation</a> to further conceal C2 communications and infrastructure. ",
    "url": "https://attack.mitre.org/techniques/T1572",
    "detection": "Monitoring for systems listening and/or establishing external connections using ports/protocols commonly associated with tunneling, such as SSH (port 22). Also monitor for processes commonly associated with tunneling, such as Plink and the OpenSSH client. \nAnalyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect application layer protocols that do not follow the expected protocol standards regarding syntax, structure, or any other variable adversaries could leverage to conceal data.(Citation: University of Birmingham C2)",
    "score": 0.8914711493695238,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 57,
    "tid": "T1203",
    "name": "Exploitation for Client Execution",
    "description": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\nSeveral types exist:\n<h3>Browser-based Exploitation</h3>\nWeb browsers are a common target through <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a> and <a href=\"https://attack.mitre.org/techniques/T1566/002\">Spearphishing Link</a>. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n<h3>Office Applications</h3>\nCommon office and productivity applications such as Microsoft Office are also targeted through <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n<h3>Common Third-party Applications</h3>\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
    "url": "https://attack.mitre.org/techniques/T1203",
    "detection": "Detecting software exploitation may be difficult depending on the tools available. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of the browser or Office processes. This could include suspicious files written to disk, evidence of <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.",
    "score": 0.8816301594419049,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
        "url": "https://attack.mitre.org/mitigations/M1048"
      },
      {
        "mid": "M1050",
        "name": "Exploit Protection",
        "description": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
        "url": "https://attack.mitre.org/mitigations/M1050"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 58,
    "tid": "T1553",
    "name": "Subvert Trust Controls",
    "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.\nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct <a href=\"https://attack.mitre.org/techniques/T1222\">File and Directory Permissions Modification</a> or <a href=\"https://attack.mitre.org/techniques/T1112\">Modify Registry</a> in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates) ",
    "url": "https://attack.mitre.org/techniques/T1553",
    "detection": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers. Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries. (Citation: SpectorOps Subverting Trust Sept 2017) A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity.(Citation: SpectorOps Code Signing Dec 2017)\nAnalyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \"Hide Microsoft Entries\" and \"Hide Windows Entries\" are both deselected.(Citation: SpectorOps Subverting Trust Sept 2017) \nMonitor and investigate attempts to modify extended file attributes with utilities such as xattr. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. ",
    "score": 0.8807632006019048,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1024",
        "name": "Restrict Registry Permissions",
        "description": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
        "url": "https://attack.mitre.org/mitigations/M1024"
      },
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1054",
        "name": "Software Configuration",
        "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
        "url": "https://attack.mitre.org/mitigations/M1054"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1553.004",
        "name": "Subvert Trust Controls: Install Root Certificate",
        "description": "Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.(Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.\nInstallation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.(Citation: Operation Emmental)\nAtypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide <a href=\"https://attack.mitre.org/techniques/T1557\">Adversary-in-the-Middle</a> capability for intercepting information transmitted over secure TLS/SSL communications.(Citation: Kaspersky Superfish)\nRoot certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence.(Citation: SpectorOps Code Signing Dec 2017)\nIn macOS, the Ay MaMi malware uses /usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert to install a malicious certificate as a trusted root certificate into the system keychain.(Citation: objective-see ay mami 2018)",
        "url": "https://attack.mitre.org/techniques/T1553/004",
        "detection": "A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity.(Citation: SpectorOps Code Signing Dec 2017) Check pre-installed certificates on new systems to ensure unnecessary or suspicious certificates are not present. Microsoft provides a list of trustworthy root certificates online and through authroot.stl.(Citation: SpectorOps Code Signing Dec 2017) The Sysinternals Sigcheck utility can also be used (sigcheck[64].exe -tuv) to dump the contents of the certificate store and list valid certificates not rooted to the Microsoft Certificate Trust List.(Citation: Microsoft Sigcheck May 2017)\nInstalled root certificates are located in the Registry under HKLM\\SOFTWARE\\Microsoft\\EnterpriseCertificates\\Root\\Certificates\\ and [HKLM or HKCU]\\Software[\\Policies]\\Microsoft\\SystemCertificates\\Root\\Certificates\\. There are a subset of root certificates that are consistent across Windows systems and can be used for comparison:(Citation: Tripwire AppUNBlocker)\n<ul>\n<li>18F7C1FCC3090203FD5BAA2F861A754976C8DD25</li>\n<li>245C97DF7514E7CF2DF8BE72AE957B9E04741E85</li>\n<li>3B1EFD3A66EA28B16697394703A72CA340A05BD5</li>\n<li>7F88CD7223F3C813818C994614A89C99FA3B5247</li>\n<li>8F43288AD272F3103B6FB1428485EA3014C0BCFE</li>\n<li>A43489159A520F0D93D032CCAF37E7FE20A8B419</li>\n<li>BE36A4562FB2EE05DBB3D32323ADF445084ED656</li>\n<li>CDD4EEAE6000AC7F40C3802C171E30148030C072</li>\n</ul>",
        "mitigations": [
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          },
          {
            "mid": "M1054",
            "name": "Software Configuration",
            "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
            "url": "https://attack.mitre.org/mitigations/M1054"
          }
        ]
      }
    ]
  },
  {
    "rank": 59,
    "tid": "T1554",
    "name": "Compromise Client Software Binary",
    "description": "Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers.\nAdversaries may make modifications to client software binaries to carry out malicious tasks when those applications are in use. For example, an adversary may copy source code for the client software, add a backdoor, compile for the target, and replace the legitimate application binary (or support files) with the backdoored one. Since these applications may be routinely executed by the user, the adversary can leverage this for persistent access to the host.",
    "url": "https://attack.mitre.org/techniques/T1554",
    "detection": "Collect and analyze signing certificate metadata and check signature validity on software that executes within the environment. Look for changes to client software that do not correlate with known software or patch cycles. \nConsider monitoring for anomalous behavior from client applications, such as atypical module loads, file reads/writes, or network connections.",
    "score": 0.8795333333333333,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1045",
        "name": "Code Signing",
        "description": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
        "url": "https://attack.mitre.org/mitigations/M1045"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 60,
    "tid": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
    "url": "https://attack.mitre.org/techniques/T1098",
    "detection": "Collect events that correlate with changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670.(Citation: Microsoft User Modified Event)(Citation: Microsoft Security Event 4670)(Citation: Microsoft Security Event 4670) Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ(Citation: InsiderThreat ChangeNTLM July 2017) or that include additional flags such as changing a password without knowledge of the old password.(Citation: GitHub Mimikatz Issue 92 June 2017)\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.\nMonitor for unusual permissions changes that may indicate excessively broad permissions being granted to compromised accounts.",
    "score": 0.8789258614285713,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1098.004",
        "name": "Account Manipulation: SSH Authorized Keys",
        "description": "Adversaries may modify the SSH authorized_keys file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The authorized_keys file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user's home directory under &lt;user-home&gt;/.ssh/authorized_keys.(Citation: SSH Authorized Keys) Users may edit the system’s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value “yes” to ensure public key and RSA authentication are enabled. The SSH config file is usually located under /etc/ssh/sshd_config.\nAdversaries may modify SSH authorized_keys files directly with scripts or shell commands to add their own adversary-supplied public keys. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.(Citation: Venafi SSH Key Abuse) (Citation: Cybereason Linux Exim Worm)",
        "url": "https://attack.mitre.org/techniques/T1098/004",
        "detection": "Use file integrity monitoring to detect changes made to the authorized_keys file for each user on a system. Monitor for suspicious processes modifying the authorized_keys file.\nMonitor for changes to and suspicious processes modifiying /etc/ssh/sshd_config.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      }
    ]
  },
  {
    "rank": 61,
    "tid": "T1211",
    "name": "Exploitation for Defense Evasion",
    "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for <a href=\"https://attack.mitre.org/techniques/T1518/001\">Security Software Discovery</a>. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.",
    "url": "https://attack.mitre.org/techniques/T1211",
    "detection": "Exploitation for defense evasion may happen shortly after the system has been compromised to prevent detection during later actions for for additional tools that may be brought in and used. Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. This could include suspicious files written to disk, evidence of <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> for attempts to hide execution or evidence of Discovery.",
    "score": 0.8417428242857143,
    "network_score": 0.2,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1019",
        "name": "Threat Intelligence Program",
        "description": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
        "url": "https://attack.mitre.org/mitigations/M1019"
      },
      {
        "mid": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
        "url": "https://attack.mitre.org/mitigations/M1048"
      },
      {
        "mid": "M1050",
        "name": "Exploit Protection",
        "description": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
        "url": "https://attack.mitre.org/mitigations/M1050"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 62,
    "tid": "T1102",
    "name": "Web Service",
    "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
    "url": "https://attack.mitre.org/techniques/T1102",
    "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)",
    "score": 0.8381123850076191,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1021",
        "name": "Restrict Web-Based Content",
        "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
        "url": "https://attack.mitre.org/mitigations/M1021"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1102.001",
        "name": "Web Service: Dead Drop Resolver",
        "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).",
        "url": "https://attack.mitre.org/techniques/T1102/001",
        "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1102.002",
        "name": "Web Service: Bidirectional Communication",
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. ",
        "url": "https://attack.mitre.org/techniques/T1102/002",
        "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1102.003",
        "name": "Web Service: One-Way Communication",
        "description": "Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.\nPopular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
        "url": "https://attack.mitre.org/techniques/T1102/003",
        "detection": "Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Packet capture analysis will require SSL/TLS inspection if data is encrypted. Analyze network data for uncommon data flows. User behavior monitoring may help to detect abnormal patterns of activity.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      }
    ]
  },
  {
    "rank": 63,
    "tid": "T1491",
    "name": "Defacement",
    "description": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for <a href=\"https://attack.mitre.org/techniques/T1491\">Defacement</a> include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of <a href=\"https://attack.mitre.org/techniques/T1491\">Defacement</a> in order to cause user discomfort, or to pressure compliance with accompanying messages. ",
    "url": "https://attack.mitre.org/techniques/T1491",
    "detection": "Monitor internal and external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.",
    "score": 0.8367476190476191,
    "network_score": 0.2,
    "file_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [
      {
        "mid": "M1053",
        "name": "Data Backup",
        "description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
        "url": "https://attack.mitre.org/mitigations/M1053"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1491.001",
        "name": "Defacement: Internal Defacement",
        "description": "An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper.(Citation: Novetta Blockbuster) Disturbing or offensive images may be used as a part of <a href=\"https://attack.mitre.org/techniques/T1491/001\">Internal Defacement</a> in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary's presence, it often takes place after other intrusion goals have been accomplished.(Citation: Novetta Blockbuster Destructive Malware)",
        "url": "https://attack.mitre.org/techniques/T1491/001",
        "detection": "Monitor internal and websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.",
        "mitigations": [
          {
            "mid": "M1053",
            "name": "Data Backup",
            "description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
            "url": "https://attack.mitre.org/mitigations/M1053"
          }
        ]
      },
      {
        "tid": "T1491.002",
        "name": "Defacement: External Defacement",
        "description": "An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.(Citation: FireEye Cyber Threats to Media Industries)(Citation: Kevin Mandia Statement to US Senate Committee on Intelligence)(Citation: Anonymous Hackers Deface Russian Govt Site) <a href=\"https://attack.mitre.org/techniques/T1491/002\">External Defacement</a> may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a>.(Citation: Trend Micro Deep Dive Into Defacement)",
        "url": "https://attack.mitre.org/techniques/T1491/002",
        "detection": "Monitor external websites for unplanned content changes. Monitor application logs for abnormal behavior that may indicate attempted or successful exploitation. Use deep packet inspection to look for artifacts of common exploit traffic, such as SQL injection. Web Application Firewalls may detect improper inputs attempting exploitation.",
        "mitigations": [
          {
            "mid": "M1053",
            "name": "Data Backup",
            "description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
            "url": "https://attack.mitre.org/mitigations/M1053"
          }
        ]
      }
    ]
  },
  {
    "rank": 64,
    "tid": "T1005",
    "name": "Data from Local System",
    "description": "Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration.\nAdversaries may do this using a <a href=\"https://attack.mitre.org/techniques/T1059\">Command and Scripting Interpreter</a>, such as <a href=\"https://attack.mitre.org/software/S0106\">cmd</a>, which has functionality to interact with the file system to gather information. Some adversaries may also use <a href=\"https://attack.mitre.org/techniques/T1119\">Automated Collection</a> on the local system.",
    "url": "https://attack.mitre.org/techniques/T1005",
    "detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.8310529156771429,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1057",
        "name": "Data Loss Prevention",
        "description": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data Loss Prevention)",
        "url": "https://attack.mitre.org/mitigations/M1057"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 65,
    "tid": "T1082",
    "name": "System Information Discovery",
    "description": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from <a href=\"https://attack.mitre.org/techniques/T1082\">System Information Discovery</a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nTools such as <a href=\"https://attack.mitre.org/software/S0096\">Systeminfo</a> can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the systemsetup configuration tool on macOS. As an example, adversaries with user-level access can execute the df -aH command to obtain currently mounted disks and associated freely available space. <a href=\"https://attack.mitre.org/techniques/T1082\">System Information Discovery</a> combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques)\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)",
    "url": "https://attack.mitre.org/techniques/T1082",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.\nIn cloud-based systems, native logging can be used to identify access to certain APIs and dashboards that may contain system information. Depending on how the environment is used, that data alone may not be useful due to benign use during normal operations.",
    "score": 0.8187705714285713,
    "network_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 66,
    "tid": "T1049",
    "name": "System Network Connections Discovery",
    "description": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview)\nUtilities and commands that acquire this information include <a href=\"https://attack.mitre.org/software/S0104\">netstat</a>, \"net use,\" and \"net session\" with <a href=\"https://attack.mitre.org/software/S0039\">Net</a>. In Mac and Linux, <a href=\"https://attack.mitre.org/software/S0104\">netstat</a> and lsof can be used to list current connections. who -a and w can be used to show which users are currently logged in, similar to \"net session\".",
    "url": "https://attack.mitre.org/techniques/T1049",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.8127238095238096,
    "process_score": 0.2,
    "file_score": 0.2,
    "cloud_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 67,
    "tid": "T1056",
    "name": "Input Capture",
    "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. <a href=\"https://attack.mitre.org/techniques/T1056/004\">Credential API Hooking</a>) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. <a href=\"https://attack.mitre.org/techniques/T1056/003\">Web Portal Capture</a>).",
    "url": "https://attack.mitre.org/techniques/T1056",
    "detection": "Detection may vary depending on how input is captured but may include monitoring for certain Windows API calls (e.g. SetWindowsHook, GetKeyState, and GetAsyncKeyState)(Citation: Adventures of a Keystroke), monitoring for malicious instances of <a href=\"https://attack.mitre.org/techniques/T1059\">Command and Scripting Interpreter</a>, and ensuring no unauthorized drivers or kernel modules that could indicate keylogging or API hooking are present.",
    "score": 0.8125875447619046,
    "process_score": 0.2,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1056.001",
        "name": "Input Capture: Keylogging",
        "description": "Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.\nKeylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:\n<ul>\n<li>Hooking API callbacks used for processing keystrokes. Unlike <a href=\"https://attack.mitre.org/techniques/T1056/004\">Credential API Hooking</a>, this focuses solely on API functions intended for processing keystroke data.</li>\n<li>Reading raw keystroke data from the hardware buffer.</li>\n<li>Windows Registry modifications.</li>\n<li>Custom drivers.</li>\n<li><a href=\"https://attack.mitre.org/techniques/T1601\">Modify System Image</a> may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks) </li>\n</ul>",
        "url": "https://attack.mitre.org/techniques/T1056/001",
        "detection": "Keyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include SetWindowsHook, GetKeyState, and GetAsyncKeyState.(Citation: Adventures of a Keystroke) Monitor the Registry and file system for such changes, monitor driver installs, and look for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.",
        "mitigations": []
      },
      {
        "tid": "T1056.002",
        "name": "Input Capture: GUI Input Capture",
        "description": "Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a>).\nAdversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as <a href=\"https://attack.mitre.org/techniques/T1059/002\">AppleScript</a>(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware)(Citation: Spoofing credential dialogs) and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015)(Citation: Spoofing credential dialogs) On Linux systems attackers may launch dialog boxes prompting users for credentials from malicious shell scripts or the command line (i.e. <a href=\"https://attack.mitre.org/techniques/T1059/004\">Unix Shell</a>).(Citation: Spoofing credential dialogs) ",
        "url": "https://attack.mitre.org/techniques/T1056/002",
        "detection": "Monitor process execution for unusual programs as well as malicious instances of <a href=\"https://attack.mitre.org/techniques/T1059\">Command and Scripting Interpreter</a> that could be used to prompt users for credentials. For example, command/script history including abnormal parameters (such as requests for credentials and/or strings related to creating password prompts) may be malicious.(Citation: Spoofing credential dialogs) \nInspect and scrutinize input prompts for indicators of illegitimacy, such as non-traditional banners, text, timing, and/or sources. ",
        "mitigations": [
          {
            "mid": "M1017",
            "name": "User Training",
            "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
            "url": "https://attack.mitre.org/mitigations/M1017"
          }
        ]
      },
      {
        "tid": "T1056.003",
        "name": "Input Capture: Web Portal Capture",
        "description": "Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.\nThis variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> and <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)",
        "url": "https://attack.mitre.org/techniques/T1056/003",
        "detection": "File monitoring may be used to detect changes to files in the Web directory for organization login pages that do not match with authorized updates to the Web server's content.",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          }
        ]
      }
    ]
  },
  {
    "rank": 68,
    "tid": "T1052",
    "name": "Exfiltration Over Physical Medium",
    "description": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
    "url": "https://attack.mitre.org/techniques/T1052",
    "detection": "Monitor file access on removable media. Detect processes that execute when removable media are mounted.",
    "score": 0.8050380952380953,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1034",
        "name": "Limit Hardware Installation",
        "description": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
        "url": "https://attack.mitre.org/mitigations/M1034"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      },
      {
        "mid": "M1057",
        "name": "Data Loss Prevention",
        "description": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data Loss Prevention)",
        "url": "https://attack.mitre.org/mitigations/M1057"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1052.001",
        "name": "Exfiltration Over Physical Medium: Exfiltration over USB",
        "description": "Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.",
        "url": "https://attack.mitre.org/techniques/T1052/001",
        "detection": "Monitor file access on removable media. Detect processes that execute when removable media are mounted.",
        "mitigations": [
          {
            "mid": "M1034",
            "name": "Limit Hardware Installation",
            "description": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
            "url": "https://attack.mitre.org/mitigations/M1034"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          },
          {
            "mid": "M1057",
            "name": "Data Loss Prevention",
            "description": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data Loss Prevention)",
            "url": "https://attack.mitre.org/mitigations/M1057"
          }
        ]
      }
    ]
  },
  {
    "rank": 69,
    "tid": "T1195",
    "name": "Supply Chain Compromise",
    "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\nSupply chain compromise can take place at any stage of the supply chain including:\n<ul>\n<li>Manipulation of development tools</li>\n<li>Manipulation of a development environment</li>\n<li>Manipulation of source code repositories (public or private)</li>\n<li>Manipulation of source code in open-source dependencies</li>\n<li>Manipulation of software update/distribution mechanisms</li>\n<li>Compromised/infected system images (multiple cases of removable media infected at the factory) (Citation: IBM Storwize) (Citation: Schneider Electric USB Malware) </li>\n<li>Replacement of legitimate software with modified versions</li>\n<li>Sales of modified/counterfeit products to legitimate distributors</li>\n<li>Shipment interdiction</li>\n</ul>\nWhile supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. (Citation: Avast CCleaner3 2018) (Citation: Microsoft Dofoil 2018) (Citation: Command Five SK 2011) Targeting may be specific to a desired victim set (Citation: Symantec Elderwood Sept 2012) or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. (Citation: Avast CCleaner3 2018) (Citation: Command Five SK 2011) Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency. (Citation: Trendmicro NPM Compromise)",
    "url": "https://attack.mitre.org/techniques/T1195",
    "detection": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. Perform physical inspection of hardware to look for potential tampering.",
    "score": 0.8041482750333333,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1016",
        "name": "Vulnerability Scanning",
        "description": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
        "url": "https://attack.mitre.org/mitigations/M1016"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1195.001",
        "name": "Supply Chain Compromise: Compromise Software Dependencies and Development Tools",
        "description": "Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency. (Citation: Trendmicro NPM Compromise)  \nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. ",
        "url": "https://attack.mitre.org/techniques/T1195/001",
        "detection": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. ",
        "mitigations": [
          {
            "mid": "M1016",
            "name": "Vulnerability Scanning",
            "description": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
            "url": "https://attack.mitre.org/mitigations/M1016"
          },
          {
            "mid": "M1051",
            "name": "Update Software",
            "description": "Perform regular software updates to mitigate exploitation risk.",
            "url": "https://attack.mitre.org/mitigations/M1051"
          }
        ]
      },
      {
        "tid": "T1195.002",
        "name": "Supply Chain Compromise: Compromise Software Supply Chain",
        "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.\nTargeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Avast CCleaner3 2018) (Citation: Command Five SK 2011)  ",
        "url": "https://attack.mitre.org/techniques/T1195/002",
        "detection": "Use verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity. ",
        "mitigations": [
          {
            "mid": "M1016",
            "name": "Vulnerability Scanning",
            "description": "Vulnerability scanning is used to find potentially exploitable software vulnerabilities to remediate them.",
            "url": "https://attack.mitre.org/mitigations/M1016"
          },
          {
            "mid": "M1051",
            "name": "Update Software",
            "description": "Perform regular software updates to mitigate exploitation risk.",
            "url": "https://attack.mitre.org/mitigations/M1051"
          }
        ]
      },
      {
        "tid": "T1195.003",
        "name": "Supply Chain Compromise: Compromise Hardware Supply Chain",
        "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.",
        "url": "https://attack.mitre.org/techniques/T1195/003",
        "detection": "Perform physical inspection of hardware to look for potential tampering. Perform integrity checking on pre-OS boot mechanisms that can be manipulated for malicious purposes.",
        "mitigations": [
          {
            "mid": "M1046",
            "name": "Boot Integrity",
            "description": "Use secure methods to boot a system and verify the integrity of the operating system and loading mechanisms.",
            "url": "https://attack.mitre.org/mitigations/M1046"
          }
        ]
      }
    ]
  },
  {
    "rank": 70,
    "tid": "T1011",
    "name": "Exfiltration Over Other Network Medium",
    "description": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel.\nAdversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network",
    "url": "https://attack.mitre.org/techniques/T1011",
    "detection": "Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious.\nMonitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.",
    "score": 0.7996666666666667,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1011.001",
        "name": "Exfiltration Over Other Network Medium: Exfiltration Over Bluetooth",
        "description": "Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.\nAdversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.",
        "url": "https://attack.mitre.org/techniques/T1011/001",
        "detection": "Monitor for processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a web browser opening with a mouse click or key press) but access the network without such may be malicious.\nMonitor for and investigate changes to host adapter settings, such as addition and/or replication of communication interfaces.",
        "mitigations": [
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      }
    ]
  },
  {
    "rank": 71,
    "tid": "T1037",
    "name": "Boot or Logon Initialization Scripts",
    "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  \nAdversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. \nAn adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges.",
    "url": "https://attack.mitre.org/techniques/T1037",
    "detection": "Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties. Monitor running process for actions that could be indicative of abnormal programs or executables running upon logon.",
    "score": 0.7935366283514285,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1024",
        "name": "Restrict Registry Permissions",
        "description": "Restrict the ability to modify certain hives or keys in the Windows Registry.",
        "url": "https://attack.mitre.org/mitigations/M1024"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1037.004",
        "name": "Boot or Logon Initialization Scripts: RC Scripts",
        "description": "Adversaries may establish persistence by modifying RC scripts which are executed during a Unix-like system’s startup. These files allow system administrators to map and start custom services at startup for different run levels. RC scripts require root privileges to modify.\nAdversaries can establish persistence by adding a malicious binary path or shell commands to rc.local, rc.common, and other RC scripts specific to the Unix-like distribution.(Citation: IranThreats Kittens Dec 2017)(Citation: Intezer HiddenWasp Map 2019) Upon reboot, the system executes the script's contents as root, resulting in persistence.\nAdversary abuse of RC scripts is especially effective for lightweight Unix-like distributions using the root user as default, such as IoT or embedded systems.(Citation: intezer-kaiji-malware)\nSeveral Unix-like systems have moved to Systemd and deprecated the use of RC scripts. This is now a deprecated mechanism in macOS in favor of <a href=\"https://attack.mitre.org/techniques/T1053/004\">Launchd</a>. (Citation: Apple Developer Doco Archive Launchd)(Citation: Startup Items) This technique can be used on Mac OS X Panther v10.3 and earlier versions which still execute the RC scripts.(Citation: Methods of Mac Malware Persistence) To maintain backwards compatibility some systems, such as Ubuntu, will execute the RC scripts if they exist with the correct file permissions.(Citation: Ubuntu Manpage systemd rc)",
        "url": "https://attack.mitre.org/techniques/T1037/004",
        "detection": "Monitor for unexpected changes to RC scripts in the /etc/ directory. Monitor process execution resulting from RC scripts for unusual or unknown applications or behavior.\nMonitor for /etc/rc.local file creation. Although types of RC scripts vary for each Unix-like distribution, several execute /etc/rc.local if present. ",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          }
        ]
      }
    ]
  },
  {
    "rank": 72,
    "tid": "T1176",
    "name": "Browser Extensions",
    "description": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access.(Citation: Wikipedia Browser Extension)(Citation: Chrome Extensions Definition)\nMalicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners.(Citation: Malicious Chrome Extension Numbers) Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions.\nPrevious to macOS 11, adversaries could silently install browser extensions via the command line using the profiles tool to install malicious .mobileconfig files. In macOS 11+, the use of the profiles tool can no longer install configuration profiles, however .mobileconfig files can be planted and installed with user interaction.(Citation: xorrior chrome extensions macOS)\nOnce the extension is installed, it can browse to websites in the background,(Citation: Chrome Extension Crypto Miner)(Citation: ICEBRG Chrome Extensions) steal all information that a user enters into a browser (including credentials)(Citation: Banker Google Chrome Extension Steals Creds)(Citation: Catch All Chrome Extension) and be used as an installer for a RAT for persistence.\nThere have also been instances of botnets using a persistent backdoor through malicious Chrome extensions.(Citation: Stantinko Botnet) There have also been similar examples of extensions being used for command &amp; control.(Citation: Chrome Extension C2 Malware)",
    "url": "https://attack.mitre.org/techniques/T1176",
    "detection": "Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates.\nMonitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation.\nOn macOS, monitor the command line for usage of the profiles tool, such as profiles install -type=configuration. Additionally, all installed extensions maintain a plist file in the /Library/Managed Preferences/username/ directory. Ensure all listed files are in alignment with approved extensions.(Citation: xorrior chrome extensions macOS)",
    "score": 0.7828779356390476,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      },
      {
        "mid": "M1033",
        "name": "Limit Software Installation",
        "description": "Block users or groups from installing unapproved software.",
        "url": "https://attack.mitre.org/mitigations/M1033"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 73,
    "tid": "T1020",
    "name": "Automated Exfiltration",
    "description": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as <a href=\"https://attack.mitre.org/techniques/T1041\">Exfiltration Over C2 Channel</a> and <a href=\"https://attack.mitre.org/techniques/T1048\">Exfiltration Over Alternative Protocol</a>.",
    "url": "https://attack.mitre.org/techniques/T1020",
    "detection": "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious.",
    "score": 0.7656915081780953,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 74,
    "tid": "T1606",
    "name": "Forge Web Credentials",
    "description": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access.\nAdversaries may generate these credential materials in order to gain access to web resources. This differs from <a href=\"https://attack.mitre.org/techniques/T1539\">Steal Web Session Cookie</a>, <a href=\"https://attack.mitre.org/techniques/T1528\">Steal Application Access Token</a>, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users. The generation of web credentials often requires secret values, such as passwords, <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a>, or other cryptographic seed values.(Citation: GitHub AWS-ADFS-Credential-Generator)\nOnce forged, adversaries may use these web credentials to access resources (ex: <a href=\"https://attack.mitre.org/techniques/T1550\">Use Alternate Authentication Material</a>), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)(Citation: Microsoft SolarWinds Customer Guidance)",
    "url": "https://attack.mitre.org/techniques/T1606",
    "detection": "Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.",
    "score": 0.7622523809523809,
    "network_score": 0.2,
    "cloud_score": 0.2,
    "mitigations": [
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      },
      {
        "mid": "M1054",
        "name": "Software Configuration",
        "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
        "url": "https://attack.mitre.org/mitigations/M1054"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1606.001",
        "name": "Forge Web Credentials: Web Cookies",
        "description": "Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.\nAdversaries may generate these cookies in order to gain access to web resources. This differs from <a href=\"https://attack.mitre.org/techniques/T1539\">Steal Web Session Cookie</a> and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.(Citation: Pass The Cookie) The generation of web cookies often requires secret values, such as passwords, <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a>, or other cryptographic seed values.\nOnce forged, adversaries may use these web cookies to access resources (<a href=\"https://attack.mitre.org/techniques/T1550/004\">Web Session Cookie</a>), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Volexity SolarWinds)(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)",
        "url": "https://attack.mitre.org/techniques/T1606/001",
        "detection": "Monitor for anomalous authentication activity, such as logons or other user session activity associated with unknown accounts. Monitor for unexpected and abnormal access to resources, including access of websites and cloud-based applications by the same user in different locations or by different systems that do not match expected configurations.",
        "mitigations": [
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          },
          {
            "mid": "M1054",
            "name": "Software Configuration",
            "description": "Implement configuration changes to software (other than the operating system) to mitigate security risks associated to how the software operates.",
            "url": "https://attack.mitre.org/mitigations/M1054"
          }
        ]
      }
    ]
  },
  {
    "rank": 75,
    "tid": "T1534",
    "name": "Internal Spearphishing",
    "description": "Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged attack where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt.(Citation: Trend Micro When Phishing Starts from the Inside 2017)\nAdversaries may leverage <a href=\"https://attack.mitre.org/techniques/T1566/001\">Spearphishing Attachment</a> or <a href=\"https://attack.mitre.org/techniques/T1566/002\">Spearphishing Link</a> as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through <a href=\"https://attack.mitre.org/techniques/T1056\">Input Capture</a> on sites that mimic email login interfaces.\nThere have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process.(Citation: Trend Micro When Phishing Starts from the Inside 2017) The Syrian Electronic Army (SEA) compromised email accounts at the Financial Times (FT) to steal additional account credentials. Once FT learned of the attack and began warning employees of the threat, the SEA sent phishing emails mimicking the Financial Times IT department and were able to compromise even more users.(Citation: THE FINANCIAL TIMES LTD 2019.)",
    "url": "https://attack.mitre.org/techniques/T1534",
    "detection": "Network intrusion detection systems and email gateways usually do not scan internal email, but an organization can leverage the journaling-based solution which sends a copy of emails to a security service for offline analysis or incorporate service-integrated solutions using on-premise or API-based integrations to help detect internal spearphishing attacks.(Citation: Trend Micro When Phishing Starts from the Inside 2017)",
    "score": 0.7594000000000001,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 76,
    "tid": "T1039",
    "name": "Data from Network Shared Drive",
    "description": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> may be used to gather information.",
    "url": "https://attack.mitre.org/techniques/T1039",
    "detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.7540285714285715,
    "network_score": 0.2,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 77,
    "tid": "T1132",
    "name": "Data Encoding",
    "description": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.",
    "url": "https://attack.mitre.org/techniques/T1132",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
    "score": 0.7178067583704761,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1132.001",
        "name": "Data Encoding: Standard Encoding",
        "description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.",
        "url": "https://attack.mitre.org/techniques/T1132/001",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1132.002",
        "name": "Data Encoding: Non-Standard Encoding",
        "description": "Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) ",
        "url": "https://attack.mitre.org/techniques/T1132/002",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      }
    ]
  },
  {
    "rank": 78,
    "tid": "T1505",
    "name": "Server Software Component",
    "description": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications.",
    "url": "https://attack.mitre.org/techniques/T1505",
    "detection": "Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.\nProcess monitoring may be used to detect servers components that perform suspicious actions such as running cmd.exe or accessing files. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citation: US-CERT Alert TA15-314A Web Shells) ",
    "score": 0.7139041899790477,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1018",
        "name": "User Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
        "url": "https://attack.mitre.org/mitigations/M1018"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      },
      {
        "mid": "M1045",
        "name": "Code Signing",
        "description": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
        "url": "https://attack.mitre.org/mitigations/M1045"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1505.001",
        "name": "Server Software Component: SQL Stored Procedures",
        "description": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).\nAdversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019) To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019)(Citation: Microsoft xp_cmdshell 2017) \nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).(Citation: Microsoft CLR Integration 2017) Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.(Citation: NetSPI SQL Server CLR) ",
        "url": "https://attack.mitre.org/techniques/T1505/001",
        "detection": "On a MSSQL Server, consider monitoring for xp_cmdshell usage.(Citation: NetSPI Startup Stored Procedures) Consider enabling audit features that can log malicious startup activities.",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1045",
            "name": "Code Signing",
            "description": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
            "url": "https://attack.mitre.org/mitigations/M1045"
          },
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      },
      {
        "tid": "T1505.002",
        "name": "Server Software Component: Transport Agent",
        "description": "Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.(Citation: Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. \nAdversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.(Citation: ESET LightNeuron May 2019) Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary. ",
        "url": "https://attack.mitre.org/techniques/T1505/002",
        "detection": "Consider monitoring application logs for abnormal behavior that may indicate suspicious installation of application software components. Consider monitoring file locations associated with the installation of new application software components such as paths from which applications typically load such extensible components.",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1045",
            "name": "Code Signing",
            "description": "Enforce binary and application integrity with digital signature verification to prevent untrusted code from executing.",
            "url": "https://attack.mitre.org/mitigations/M1045"
          },
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      },
      {
        "tid": "T1505.003",
        "name": "Server Software Component: Web Shell",
        "description": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (ex: <a href=\"https://attack.mitre.org/software/S0020\">China Chopper</a> Web shell client).(Citation: Lee 2013) ",
        "url": "https://attack.mitre.org/techniques/T1505/003",
        "detection": "Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload: (Citation: Lee 2013) \n&lt;?php @eval($_POST['password']);&gt;\nNevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as spawning cmd.exe or accessing files that are not in the Web directory.(Citation: NSA Cyber Mitigating Web Shells)\nFile monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script.(Citation: NSA Cyber Mitigating Web Shells)\nLog authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citation: US-CERT Alert TA15-314A Web Shells)",
        "mitigations": [
          {
            "mid": "M1018",
            "name": "User Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to user accounts.",
            "url": "https://attack.mitre.org/mitigations/M1018"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          }
        ]
      }
    ]
  },
  {
    "rank": 79,
    "tid": "T1556",
    "name": "Modify Authentication Process",
    "description": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>.\nAdversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.",
    "url": "https://attack.mitre.org/techniques/T1556",
    "detection": "Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (ex: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages) and correlate then investigate the DLL files these files reference. \nPassword filters will also show up as an autorun and loaded DLL in lsass.exe.(Citation: Clymb3r Function Hook Passwords Sept 2013)\nMonitor for calls to OpenProcess that can be used to manipulate lsass.exe running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as cryptdll.dll and samsrv.dll).(Citation: Dell Skeleton) \nMonitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.\nMonitor for suspicious additions to the /Library/Security/SecurityAgentPlugins directory.(Citation: Xorrior Authorization Plugins)\nConfigure robust, consistent account activity audit policies across the enterprise and with externally accessible services. (Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).",
    "score": 0.7134285714285715,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1025",
        "name": "Privileged Process Integrity",
        "description": "Protect processes with high privileges that can be used to interact with critical system components through use of protected process light, anti-process injection defenses, or other process integrity enforcement measures.",
        "url": "https://attack.mitre.org/mitigations/M1025"
      },
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1556.003",
        "name": "Modify Authentication Process: Pluggable Authentication Modules",
        "description": "Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is pam_unix.so, which retrieves, sets, and verifies account authentication information in /etc/passwd and /etc/shadow.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)\nAdversaries may modify components of the PAM system to create backdoors. PAM components, such as pam_unix.so, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)\nMalicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)",
        "url": "https://attack.mitre.org/techniques/T1556/003",
        "detection": "Monitor PAM configuration and module paths (ex: /etc/pam.d/) for changes. Use system-integrity tools such as AIDE and monitoring tools such as auditd to monitor PAM files.\nLook for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times (ex: when the user is not present) or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).",
        "mitigations": [
          {
            "mid": "M1026",
            "name": "Privileged Account Management",
            "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
            "url": "https://attack.mitre.org/mitigations/M1026"
          },
          {
            "mid": "M1032",
            "name": "Multi-factor Authentication",
            "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
            "url": "https://attack.mitre.org/mitigations/M1032"
          }
        ]
      }
    ]
  },
  {
    "rank": 80,
    "tid": "T1041",
    "name": "Exfiltration Over C2 Channel",
    "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
    "url": "https://attack.mitre.org/techniques/T1041",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
    "score": 0.7054839747619048,
    "network_score": 0.2,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      },
      {
        "mid": "M1057",
        "name": "Data Loss Prevention",
        "description": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data Loss Prevention)",
        "url": "https://attack.mitre.org/mitigations/M1057"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 81,
    "tid": "T1199",
    "name": "Trusted Relationship",
    "description": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship exploits an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network.\nOrganizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> used by the other party for access to internal network systems may be compromised and used.(Citation: CISA IT Service Providers)",
    "url": "https://attack.mitre.org/techniques/T1199",
    "detection": "Establish monitoring for activity conducted by second and third party providers and other trusted entities that may be leveraged as a means to gain access to the network. Depending on the type of relationship, an adversary may have access to significant amounts of information about the target before conducting an operation, especially if the trusted relationship is based on IT services. Adversaries may be able to act quickly towards an objective, so proper monitoring for behavior related to Credential Access, Lateral Movement, and Collection will be important to detect the intrusion.",
    "score": 0.7023523809523808,
    "network_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1052",
        "name": "User Account Control",
        "description": "Configure Windows User Account Control to mitigate risk of adversaries obtaining elevated process access.",
        "url": "https://attack.mitre.org/mitigations/M1052"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 82,
    "tid": "T1573",
    "name": "Encrypted Channel",
    "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
    "url": "https://attack.mitre.org/techniques/T1573",
    "detection": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
    "score": 0.6914941288228571,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1020",
        "name": "SSL/TLS Inspection",
        "description": "Break and inspect SSL/TLS sessions to look at encrypted web traffic for adversary activity.",
        "url": "https://attack.mitre.org/mitigations/M1020"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1573.001",
        "name": "Encrypted Channel: Symmetric Cryptography",
        "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.",
        "url": "https://attack.mitre.org/techniques/T1573/001",
        "detection": "With symmetric encryption, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures.\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1573.002",
        "name": "Encrypted Channel: Asymmetric Cryptography",
        "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as <a href=\"https://attack.mitre.org/techniques/T1573/002\">Asymmetric Cryptography</a>.",
        "url": "https://attack.mitre.org/techniques/T1573/002",
        "detection": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1020",
            "name": "SSL/TLS Inspection",
            "description": "Break and inspect SSL/TLS sessions to look at encrypted web traffic for adversary activity.",
            "url": "https://attack.mitre.org/mitigations/M1020"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      }
    ]
  },
  {
    "rank": 83,
    "tid": "T1025",
    "name": "Data from Removable Media",
    "description": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> may be used to gather information. \nSome adversaries may also use <a href=\"https://attack.mitre.org/techniques/T1119\">Automated Collection</a> on removable media.",
    "url": "https://attack.mitre.org/techniques/T1025",
    "detection": "Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.6909428571428571,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1057",
        "name": "Data Loss Prevention",
        "description": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data Loss Prevention)",
        "url": "https://attack.mitre.org/mitigations/M1057"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 84,
    "tid": "T1565",
    "name": "Data Manipulation",
    "description": "Adversaries may insert, delete, or manipulate data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.\nThe type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
    "url": "https://attack.mitre.org/techniques/T1565",
    "detection": "Where applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values. With some critical processes involving transmission of data, manual or out-of-band integrity checking may be useful for identifying manipulated data.",
    "score": 0.6744441238095238,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1029",
        "name": "Remote Data Storage",
        "description": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
        "url": "https://attack.mitre.org/mitigations/M1029"
      },
      {
        "mid": "M1030",
        "name": "Network Segmentation",
        "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
        "url": "https://attack.mitre.org/mitigations/M1030"
      },
      {
        "mid": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Protect sensitive information with strong encryption.",
        "url": "https://attack.mitre.org/mitigations/M1041"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1565.001",
        "name": "Data Manipulation: Stored Data Manipulation",
        "description": "Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
        "url": "https://attack.mitre.org/techniques/T1565/001",
        "detection": "Where applicable, inspect important file hashes, locations, and modifications for suspicious/unexpected values.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1029",
            "name": "Remote Data Storage",
            "description": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
            "url": "https://attack.mitre.org/mitigations/M1029"
          },
          {
            "mid": "M1041",
            "name": "Encrypt Sensitive Information",
            "description": "Protect sensitive information with strong encryption.",
            "url": "https://attack.mitre.org/mitigations/M1041"
          }
        ]
      },
      {
        "tid": "T1565.002",
        "name": "Data Manipulation: Transmitted Data Manipulation",
        "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\nManipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
        "url": "https://attack.mitre.org/techniques/T1565/002",
        "detection": "Detecting the manipulation of data as at passes over a network can be difficult without the appropriate tools. In some cases integrity verification checks, such as file hashing, may be used on critical files as they transit a network. With some critical processes involving transmission of data, manual or out-of-band integrity checking may be useful for identifying manipulated data. ",
        "mitigations": [
          {
            "mid": "M1041",
            "name": "Encrypt Sensitive Information",
            "description": "Protect sensitive information with strong encryption.",
            "url": "https://attack.mitre.org/mitigations/M1041"
          }
        ]
      },
      {
        "tid": "T1565.003",
        "name": "Data Manipulation: Runtime Data Manipulation",
        "description": "Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.\nAdversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct <a href=\"https://attack.mitre.org/techniques/T1546/001\">Change Default File Association</a> and <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.",
        "url": "https://attack.mitre.org/techniques/T1565/003",
        "detection": "Inspect important application binary file hashes, locations, and modifications for suspicious/unexpected values.",
        "mitigations": [
          {
            "mid": "M1022",
            "name": "Restrict File and Directory Permissions",
            "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
            "url": "https://attack.mitre.org/mitigations/M1022"
          },
          {
            "mid": "M1030",
            "name": "Network Segmentation",
            "description": "Architect sections of the network to isolate critical systems, functions, or resources. Use physical and logical segmentation to prevent access to potentially sensitive systems and information. Use a DMZ to contain any internet-facing services that should not be exposed from the internal network. Configure separate virtual private cloud (VPC) instances to isolate critical cloud systems.",
            "url": "https://attack.mitre.org/mitigations/M1030"
          }
        ]
      }
    ]
  },
  {
    "rank": 85,
    "tid": "T1496",
    "name": "Resource Hijacking",
    "description": "Adversaries may leverage the resources of co-opted systems in order to solve resource intensive problems which may impact system and/or hosted service availability. \nOne common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive.(Citation: Kaspersky Lazarus Under The Hood Blog 2017) Servers and cloud-based(Citation: CloudSploit - Unused AWS Regions) systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining. Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster.(Citation: Unit 42 Hildegard Malware)(Citation: Trend Micro Exposed Docker APIs)\nAdditionally, some cryptocurrency mining malware kills off processes for competing malware to ensure it’s not competing for resources.(Citation: Trend Micro War of Crypto Miners)",
    "url": "https://attack.mitre.org/techniques/T1496",
    "detection": "Consider monitoring process resource usage to determine anomalous activity associated with malicious hijacking of computer resources such as CPU, memory, and graphics processing resources. Monitor for suspicious use of network resources associated with cryptocurrency mining software. Monitor for common cryptomining software process names and files on local systems that may indicate compromise and resource usage.",
    "score": 0.6716643115095239,
    "network_score": 0.2,
    "file_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 86,
    "tid": "T1486",
    "name": "Data Encrypted for Impact",
    "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018) In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017)\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>, <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>, and <a href=\"https://attack.mitre.org/techniques/T1021/002\">SMB/Windows Admin Shares</a>.(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)\nIn cloud environments, storage objects within compromised accounts may also be encrypted.(Citation: Rhino S3 Ransomware Part 1)",
    "url": "https://attack.mitre.org/techniques/T1486",
    "detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories.\nIn some cases, monitoring for unusual kernel driver installation activity can aid in detection.\nIn cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.",
    "score": 0.6684509347619048,
    "network_score": 0.2,
    "hardware_score": 0.2,
    "mitigations": [
      {
        "mid": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": "Use capabilities to prevent suspicious behavior patterns from occurring on endpoint systems. This could include suspicious process, file, API call, etc. behavior.",
        "url": "https://attack.mitre.org/mitigations/M1040"
      },
      {
        "mid": "M1053",
        "name": "Data Backup",
        "description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
        "url": "https://attack.mitre.org/mitigations/M1053"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 87,
    "tid": "T1205",
    "name": "Traffic Signaling",
    "description": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. <a href=\"https://attack.mitre.org/techniques/T1205/001\">Port Knocking</a>), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software.\nAdversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s).\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.\nOn network devices, adversaries may use crafted packets to enable <a href=\"https://attack.mitre.org/techniques/T1556/004\">Network Device Authentication</a> for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.(Citation: Cisco Synful Knock Evolution) (Citation: FireEye - Synful Knock) (Citation: Cisco Blog Legacy Device Attacks)  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage <a href=\"https://attack.mitre.org/techniques/T1601/001\">Patch System Image</a> due to the monolithic nature of the architecture.\nAdversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement.(Citation: Bleeping Computer - Ryuk WoL) (Citation: AMD Magic Packet)",
    "url": "https://attack.mitre.org/techniques/T1205",
    "detection": "Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.\nThe Wake-on-LAN magic packet consists of 6 bytes of FF followed by sixteen repetitions of the target system's IEEE address. Seeing this string anywhere in a packet's payload may be indicative of a Wake-on-LAN attempt.(Citation: GitLab WakeOnLAN)",
    "score": 0.6681238095238096,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1205.001",
        "name": "Traffic Signaling: Port Knocking",
        "description": "Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.\nThis technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.\nThe observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.",
        "url": "https://attack.mitre.org/techniques/T1205/001",
        "detection": "Record network packets sent to and from the system, looking for extraneous packets that do not belong to established flows.",
        "mitigations": [
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      }
    ]
  },
  {
    "rank": 88,
    "tid": "T1080",
    "name": "Taint Shared Content",
    "description": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.\nA directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses <a href=\"https://attack.mitre.org/techniques/T1547/009\">Shortcut Modification</a> of directory .LNK files that use <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to look like the real directories, which are hidden through <a href=\"https://attack.mitre.org/techniques/T1564/001\">Hidden Files and Directories</a>. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. (Citation: Retwin Directory Share Pivot)\nAdversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS.",
    "url": "https://attack.mitre.org/techniques/T1080",
    "detection": "Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques.\nFrequently scan shared network directories for malicious files, hidden files, .LNK files, and other file types that may not typical exist in directories used to share specific types of content.",
    "score": 0.662187211904762,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": "Restrict access by setting directory and file permissions that are not specific to users or privileged accounts.",
        "url": "https://attack.mitre.org/mitigations/M1022"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1050",
        "name": "Exploit Protection",
        "description": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
        "url": "https://attack.mitre.org/mitigations/M1050"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 89,
    "tid": "T1135",
    "name": "Network Share Discovery",
    "description": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \nFile sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder) <a href=\"https://attack.mitre.org/software/S0039\">Net</a> can be used to query a remote system for available shared drives using the net view \\\\remotesystem command. It can also be used to query shared drives on the local system using net share. For macOS, the sharing -l command lists all shared points used for smb services.",
    "url": "https://attack.mitre.org/techniques/T1135",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nNormal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.6370712918352381,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 90,
    "tid": "T1212",
    "name": "Exploitation for Credential Access",
    "description": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain access to systems. One example of this is MS14-068, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
    "url": "https://attack.mitre.org/techniques/T1212",
    "detection": "Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. Credential resources obtained through exploitation may be detectable in use if they are not normally used or seen.",
    "score": 0.6333333333333333,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1019",
        "name": "Threat Intelligence Program",
        "description": "A threat intelligence program helps an organization generate their own threat intelligence information and track trends to inform defensive priorities to mitigate risk.",
        "url": "https://attack.mitre.org/mitigations/M1019"
      },
      {
        "mid": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
        "url": "https://attack.mitre.org/mitigations/M1048"
      },
      {
        "mid": "M1050",
        "name": "Exploit Protection",
        "description": "Use capabilities to detect and block conditions that may lead to or be indicative of a software exploit occurring.",
        "url": "https://attack.mitre.org/mitigations/M1050"
      },
      {
        "mid": "M1051",
        "name": "Update Software",
        "description": "Perform regular software updates to mitigate exploitation risk.",
        "url": "https://attack.mitre.org/mitigations/M1051"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 91,
    "tid": "T1114",
    "name": "Email Collection",
    "description": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. ",
    "url": "https://attack.mitre.org/techniques/T1114",
    "detection": "There are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection.\nFile access of local system email files for Exfiltration, unusual processes connecting to an email server within a network, or unusual access patterns or authentication attempts on a public-facing webmail server may all be indicators of malicious activity.\nMonitor processes and command-line arguments for actions that could be taken to gather local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.\nDetection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account.\nAuto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include X-MS-Exchange-Organization-AutoForwarded set to true, X-MailFwdBy and X-Forwarded-To. The forwardingSMTPAddress parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2) High volumes of emails that bear the X-MS-Exchange-Organization-AutoForwarded header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.",
    "score": 0.6095238095238096,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1032",
        "name": "Multi-factor Authentication",
        "description": "Use two or more pieces of evidence to authenticate to a system; such as username and password in addition to a token from a physical smart card or token generator.",
        "url": "https://attack.mitre.org/mitigations/M1032"
      },
      {
        "mid": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Protect sensitive information with strong encryption.",
        "url": "https://attack.mitre.org/mitigations/M1041"
      },
      {
        "mid": "M1047",
        "name": "Audit",
        "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
        "url": "https://attack.mitre.org/mitigations/M1047"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1114.003",
        "name": "Email Collection: Email Forwarding Rule",
        "description": "Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim’s organization to use as part of further exploits or operations.(Citation: US-CERT TA18-068A 2018) Furthermore, email forwarding rules can allow adversaries to maintain persistent access to victim's emails even after compromised credentials are reset by administrators.(Citation: Pfammatter - Hidden Inbox Rules) Most email clients allow users to create inbox rules for various email functions, including forwarding to a different recipient. These rules may be created through a local email application, a web interface, or by command-line interface. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2)(Citation: Mac Forwarding Rules)\nAny user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more. Adversaries may also hide the rule by making use of the Microsoft Messaging API (MAPI) to modify the rule properties, making it hidden and not visible from Outlook, OWA or most Exchange Administration tools.(Citation: Pfammatter - Hidden Inbox Rules)",
        "url": "https://attack.mitre.org/techniques/T1114/003",
        "detection": "Detection is challenging because all messages forwarded because of an auto-forwarding rule have the same presentation as a manually forwarded message. It is also possible for the user to not be aware of the addition of such an auto-forwarding rule and not suspect that their account has been compromised; email-forwarding rules alone will not affect the normal usage patterns or operations of the email account. This is especially true in cases with hidden auto-forwarding rules. This makes it only possible to reliably detect the existence of a hidden auto-forwarding rule by examining message tracking logs or by using a MAPI editor to notice the modified rule property values.(Citation: Pfammatter - Hidden Inbox Rules)\nAuto-forwarded messages generally contain specific detectable artifacts that may be present in the header; such artifacts would be platform-specific. Examples include X-MS-Exchange-Organization-AutoForwarded set to true, X-MailFwdBy and X-Forwarded-To. The forwardingSMTPAddress parameter used in a forwarding process that is managed by administrators and not by user actions. All messages for the mailbox are forwarded to the specified SMTP address. However, unlike typical client-side rules, the message does not appear as forwarded in the mailbox; it appears as if it were sent directly to the specified destination mailbox.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2) High volumes of emails that bear the X-MS-Exchange-Organization-AutoForwarded header (indicating auto-forwarding) without a corresponding number of emails that match the appearance of a forwarded message may indicate that further investigation is needed at the administrator level rather than user-level.",
        "mitigations": [
          {
            "mid": "M1041",
            "name": "Encrypt Sensitive Information",
            "description": "Protect sensitive information with strong encryption.",
            "url": "https://attack.mitre.org/mitigations/M1041"
          },
          {
            "mid": "M1042",
            "name": "Disable or Remove Feature or Program",
            "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
            "url": "https://attack.mitre.org/mitigations/M1042"
          },
          {
            "mid": "M1047",
            "name": "Audit",
            "description": "Perform audits or scans of systems, permissions, insecure software, insecure configurations, etc. to identify potential weaknesses.",
            "url": "https://attack.mitre.org/mitigations/M1047"
          }
        ]
      }
    ]
  },
  {
    "rank": 92,
    "tid": "T1518",
    "name": "Software Discovery",
    "description": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from <a href=\"https://attack.mitre.org/techniques/T1518\">Software Discovery</a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to <a href=\"https://attack.mitre.org/techniques/T1068\">Exploitation for Privilege Escalation</a>.",
    "url": "https://attack.mitre.org/techniques/T1518",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.6005971076285714,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1518.001",
        "name": "Software Discovery: Security Software Discovery",
        "description": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from <a href=\"https://attack.mitre.org/techniques/T1518/001\">Security Software Discovery</a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nExample commands that can be used to obtain security software information are <a href=\"https://attack.mitre.org/software/S0108\">netsh</a>, reg query with <a href=\"https://attack.mitre.org/software/S0075\">Reg</a>, dir with <a href=\"https://attack.mitre.org/software/S0106\">cmd</a>, and <a href=\"https://attack.mitre.org/software/S0057\">Tasklist</a>, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.(Citation: Expel IO Evil in AWS)",
        "url": "https://attack.mitre.org/techniques/T1518/001",
        "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.\nIn cloud environments, additionally monitor logs for the usage of APIs that may be used to gather information about security software configurations within the environment.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 93,
    "tid": "T1498",
    "name": "Network Denial of Service",
    "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\nFor DoS attacks targeting the hosting system directly, see <a href=\"https://attack.mitre.org/techniques/T1499\">Endpoint Denial of Service</a>.",
    "url": "https://attack.mitre.org/techniques/T1498",
    "detection": "Detection of Network DoS can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow(Citation: Cisco DoSdetectNetflow), SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an Network DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.",
    "score": 0.5968142857142857,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1498.001",
        "name": "Network Denial of Service: Direct Network Flood",
        "description": "Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. <a href=\"https://attack.mitre.org/techniques/T1498/001\">Direct Network Flood</a> are when one or more systems are used to send a high-volume of network packets towards the targeted service's network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.\nBotnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)",
        "url": "https://attack.mitre.org/techniques/T1498/001",
        "detection": "Detection of a network flood can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow(Citation: Cisco DoSdetectNetflow), SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a network flood event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.",
        "mitigations": [
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      },
      {
        "tid": "T1498.002",
        "name": "Network Denial of Service: Reflection Amplification",
        "description": "Adversaries may attempt to cause a denial of service by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflector may be used to focus traffic on the target.(Citation: Cloudflare ReflectionDoS May 2017)\nReflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS(Citation: Cloudflare DNSamplficationDoS) and NTP(Citation: Cloudflare NTPamplifciationDoS), though the use of several others in the wild have been documented.(Citation: Arbor AnnualDoSreport Jan 2018)  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.(Citation: Cloudflare Memcrashed Feb 2018)",
        "url": "https://attack.mitre.org/techniques/T1498/002",
        "detection": "Detection of reflection amplification can sometimes be achieved before the traffic volume is sufficient to cause impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness or services provided by an upstream network service provider. Typical network throughput monitoring tools such as netflow(Citation: Cisco DoSdetectNetflow), SNMP, and custom scripts can be used to detect sudden increases in network or service utilization. Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect a reflection amplification DoS event as it starts. Often, the lead time may be small and the indicator of an event availability of the network or service drops. The analysis tools mentioned can then be used to determine the type of DoS causing the outage and help with remediation.",
        "mitigations": [
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      }
    ]
  },
  {
    "rank": 94,
    "tid": "T1069",
    "name": "Permission Groups Discovery",
    "description": "Adversaries may attempt to find group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions.",
    "url": "https://attack.mitre.org/techniques/T1069",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>. Monitor container logs for commands and/or API calls related to listing permissions for pods and nodes, such as kubectl auth can-i.(Citation: K8s Authorization Overview)",
    "score": 0.5748529325038096,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1069.001",
        "name": "Permission Groups Discovery: Local Groups",
        "description": "Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.\nCommands such as net localgroup of the <a href=\"https://attack.mitre.org/software/S0039\">Net</a> utility, dscl . -list /Groups on macOS, and groups on Linux can list local groups.",
        "url": "https://attack.mitre.org/techniques/T1069/001",
        "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
        "mitigations": []
      },
      {
        "tid": "T1069.002",
        "name": "Permission Groups Discovery: Domain Groups",
        "description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\nCommands such as net group /domain of the <a href=\"https://attack.mitre.org/software/S0039\">Net</a> utility,  dscacheutil -q group on macOS, and ldapsearch on Linux can list domain-level groups.",
        "url": "https://attack.mitre.org/techniques/T1069/002",
        "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 95,
    "tid": "T1087",
    "name": "Account Discovery",
    "description": "Adversaries may attempt to get a listing of accounts on a system or within an environment. This information can help adversaries determine which accounts exist to aid in follow-on behavior.",
    "url": "https://attack.mitre.org/techniques/T1087",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.\nMonitor for processes that can be used to enumerate user accounts, such as net.exe and net1.exe, especially when executed in quick succession.(Citation: Elastic - Koadiac Detection with EQL)",
    "score": 0.5710958066666667,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1087.001",
        "name": "Account Discovery: Local Account",
        "description": "Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.\nCommands such as net user and net localgroup of the <a href=\"https://attack.mitre.org/software/S0039\">Net</a> utility and id and groupson macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the /etc/passwd file. On macOS the dscl . list /Users command can be used to enumerate local accounts.",
        "url": "https://attack.mitre.org/techniques/T1087/001",
        "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.\nMonitor for processes that can be used to enumerate user accounts, such as net.exe and net1.exe, especially when executed in quick succession.(Citation: Elastic - Koadiac Detection with EQL)",
        "mitigations": [
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          }
        ]
      },
      {
        "tid": "T1087.002",
        "name": "Account Discovery: Domain Account",
        "description": "Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.\nCommands such as net user /domain and net group /domain of the <a href=\"https://attack.mitre.org/software/S0039\">Net</a> utility, dscacheutil -q groupon macOS, and ldapsearch on Linux can list domain users and groups.",
        "url": "https://attack.mitre.org/techniques/T1087/002",
        "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
        "mitigations": [
          {
            "mid": "M1028",
            "name": "Operating System Configuration",
            "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
            "url": "https://attack.mitre.org/mitigations/M1028"
          }
        ]
      }
    ]
  },
  {
    "rank": 96,
    "tid": "T1123",
    "name": "Audio Capture",
    "description": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.\nMalware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.",
    "url": "https://attack.mitre.org/techniques/T1123",
    "detection": "Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.\nBehavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.",
    "score": 0.5540285714285714,
    "network_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 97,
    "tid": "T1083",
    "name": "File and Directory Discovery",
    "description": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from <a href=\"https://attack.mitre.org/techniques/T1083\">File and Directory Discovery</a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nMany command shell utilities can be used to obtain this information. Examples include dir, tree, ls, find, and locate.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a>.",
    "url": "https://attack.mitre.org/techniques/T1083",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.5513216428571429,
    "network_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 98,
    "tid": "T1140",
    "name": "Deobfuscate/Decode Files or Information",
    "description": "Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1027\">Obfuscated Files or Information</a> to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is use of <a href=\"https://attack.mitre.org/software/S0160\">certutil</a> to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows copy /b command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a>. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)",
    "url": "https://attack.mitre.org/techniques/T1140",
    "detection": "Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as <a href=\"https://attack.mitre.org/software/S0160\">certutil</a>.\nMonitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.",
    "score": 0.544029160952381,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 99,
    "tid": "T1111",
    "name": "Two-Factor Authentication Interception",
    "description": "Adversaries may target two-factor authentication mechanisms, such as smart cards, to gain access to credentials that can be used to access systems, services, and network resources. Use of two or multi-factor authentication (2FA or MFA) is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. \nIf a smart card is used for two-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)\nAdversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). (Citation: GCN RSA June 2011)\nOther methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors. (Citation: Operation Emmental)",
    "url": "https://attack.mitre.org/techniques/T1111",
    "detection": "Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior.\nSimilar to <a href=\"https://attack.mitre.org/techniques/T1056\">Input Capture</a>, keylogging activity can take various forms but can may be detected via installation of a driver, setting a hook, or usage of particular API calls associated with polling to intercept keystrokes.",
    "score": 0.5404761904761906,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1017",
        "name": "User Training",
        "description": "Train users to be aware of access or manipulation attempts by an adversary to reduce the risk of successful spearphishing, social engineering, and other techniques that involve user interaction.",
        "url": "https://attack.mitre.org/mitigations/M1017"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 100,
    "tid": "T1113",
    "name": "Screen Capture",
    "description": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as CopyFromScreen, xwd, or screencapture.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)",
    "url": "https://attack.mitre.org/techniques/T1113",
    "detection": "Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.",
    "score": 0.5399419085714285,
    "process_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 101,
    "tid": "T1531",
    "name": "Account Access Removal",
    "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.\nAdversaries may also subsequently log off and/or reboot boxes to set malicious changes into place.(Citation: CarbonBlack LockerGoga 2019)(Citation: Unit42 LockerGoga 2019)",
    "url": "https://attack.mitre.org/techniques/T1531",
    "detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in deleting accounts or changing passwords, such as use of <a href=\"https://attack.mitre.org/software/S0039\">Net</a>. Windows event logs may also designate activity associated with an adversary's attempt to remove access to an account:\n<ul>\n<li>Event ID 4723 - An attempt was made to change an account's password</li>\n<li>Event ID 4724 - An attempt was made to reset an account's password</li>\n<li>Event ID 4726 - A user account was deleted</li>\n<li>Event ID 4740 - A user account was locked out</li>\n</ul>\nAlerting on <a href=\"https://attack.mitre.org/software/S0039\">Net</a> and these Event IDs may generate a high degree of false positives, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.",
    "score": 0.5283571428571429,
    "process_score": 0.2,
    "file_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 102,
    "tid": "T1119",
    "name": "Automated Collection",
    "description": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a <a href=\"https://attack.mitre.org/techniques/T1059\">Command and Scripting Interpreter</a> to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. \nThis technique may incorporate use of other techniques such as <a href=\"https://attack.mitre.org/techniques/T1083\">File and Directory Discovery</a> and <a href=\"https://attack.mitre.org/techniques/T1570\">Lateral Tool Transfer</a> to identify and move files.",
    "url": "https://attack.mitre.org/techniques/T1119",
    "detection": "Depending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated collection may occur along with other techniques such as <a href=\"https://attack.mitre.org/techniques/T1074\">Data Staged</a>. As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.5203063442857143,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1029",
        "name": "Remote Data Storage",
        "description": "Use remote security log and sensitive file storage where access can be controlled better to prevent exposure of intrusion detection log data or sensitive information.",
        "url": "https://attack.mitre.org/mitigations/M1029"
      },
      {
        "mid": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": "Protect sensitive information with strong encryption.",
        "url": "https://attack.mitre.org/mitigations/M1041"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 103,
    "tid": "T1480",
    "name": "Execution Guardrails",
    "description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign.(Citation: FireEye Kevin Mandia Guardrails) Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses.(Citation: FireEye Outlook Dec 2019)\nGuardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a>. While use of <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.",
    "url": "https://attack.mitre.org/techniques/T1480",
    "detection": "Detecting the use of guardrails may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of <a href=\"https://attack.mitre.org/tactics/TA0007\">Discovery</a>, especially in a short period of time, may aid in detection.",
    "score": 0.5198,
    "network_score": 0.2,
    "file_score": 0.2,
    "mitigations": [
      {
        "mid": "M1055",
        "name": "Do Not Mitigate",
        "description": "This category is to associate techniques that mitigation might increase risk of compromise and therefore mitigation is not recommended.",
        "url": "https://attack.mitre.org/mitigations/M1055"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1480.001",
        "name": "Execution Guardrails: Environmental Keying",
        "description": "Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of <a href=\"https://attack.mitre.org/techniques/T1480\">Execution Guardrails</a> that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.(Citation: EK Clueless Agents)\nValues can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.(Citation: Kaspersky Gauss Whitepaper)(Citation: Proofpoint Router Malvertising)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware) By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.(Citation: Kaspersky Gauss Whitepaper)(Citation: Ebowla: Genetic Malware) These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).\nSimilar to <a href=\"https://attack.mitre.org/techniques/T1027\">Obfuscated Files or Information</a>, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.(Citation: Kaspersky Gauss Whitepaper)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware)(Citation: Demiguise Guardrail Router Logo) By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.(Citation: Kaspersky Gauss Whitepaper) This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.\nLike other <a href=\"https://attack.mitre.org/techniques/T1480\">Execution Guardrails</a>, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a>. While use of <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.",
        "url": "https://attack.mitre.org/techniques/T1480/001",
        "detection": "Detecting the use of environmental keying may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of <a href=\"https://attack.mitre.org/tactics/TA0007\">Discovery</a>, especially in a short period of time, may aid in detection.",
        "mitigations": [
          {
            "mid": "M1055",
            "name": "Do Not Mitigate",
            "description": "This category is to associate techniques that mitigation might increase risk of compromise and therefore mitigation is not recommended.",
            "url": "https://attack.mitre.org/mitigations/M1055"
          }
        ]
      }
    ]
  },
  {
    "rank": 104,
    "tid": "T1567",
    "name": "Exfiltration Over Web Service",
    "description": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.\nWeb service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
    "url": "https://attack.mitre.org/techniques/T1567",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
    "score": 0.5,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1021",
        "name": "Restrict Web-Based Content",
        "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
        "url": "https://attack.mitre.org/mitigations/M1021"
      },
      {
        "mid": "M1057",
        "name": "Data Loss Prevention",
        "description": "Use a data loss prevention (DLP) strategy to categorize sensitive data, identify data formats indicative of personal identifiable information (PII), and restrict exfiltration of sensitive data.(Citation: PurpleSec Data Loss Prevention)",
        "url": "https://attack.mitre.org/mitigations/M1057"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1567.001",
        "name": "Exfiltration Over Web Service: Exfiltration to Code Repository",
        "description": "Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.\nExfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network. ",
        "url": "https://attack.mitre.org/techniques/T1567/001",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to code repositories. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
        "mitigations": [
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          }
        ]
      },
      {
        "tid": "T1567.002",
        "name": "Exfiltration Over Web Service: Exfiltration to Cloud Storage",
        "description": "Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.\nExamples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service. ",
        "url": "https://attack.mitre.org/techniques/T1567/002",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server) to known cloud storage services. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. User behavior monitoring may help to detect abnormal patterns of activity.",
        "mitigations": [
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          }
        ]
      }
    ]
  },
  {
    "rank": 105,
    "tid": "T1001",
    "name": "Data Obfuscation",
    "description": "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols. ",
    "url": "https://attack.mitre.org/techniques/T1001",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
    "score": 0.49729175571428574,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1001.001",
        "name": "Data Obfuscation: Junk Data",
        "description": "Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters. ",
        "url": "https://attack.mitre.org/techniques/T1001/001",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1001.002",
        "name": "Data Obfuscation: Steganography",
        "description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control. ",
        "url": "https://attack.mitre.org/techniques/T1001/002",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1001.003",
        "name": "Data Obfuscation: Protocol Impersonation",
        "description": "Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  \nAdversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity. ",
        "url": "https://attack.mitre.org/techniques/T1001/003",
        "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
        "mitigations": [
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      }
    ]
  },
  {
    "rank": 106,
    "tid": "T1568",
    "name": "Dynamic Resolution",
    "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.\nAdversaries may use dynamic resolution for the purpose of <a href=\"https://attack.mitre.org/techniques/T1008\">Fallback Channels</a>. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)",
    "url": "https://attack.mitre.org/techniques/T1568",
    "detection": "Detecting dynamically generated C2 can be challenging due to the number of different algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are multiple approaches to detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more (Citation: Data Driven Security DGA). CDN domains may trigger these detections due to the format of their domain names. In addition to detecting algorithm generated domains based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.",
    "score": 0.47380952380952385,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1021",
        "name": "Restrict Web-Based Content",
        "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
        "url": "https://attack.mitre.org/mitigations/M1021"
      },
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1568.001",
        "name": "Dynamic Resolution: Fast Flux DNS",
        "description": "Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.(Citation: MehtaFastFluxPt1)(Citation: MehtaFastFluxPt2)(Citation: Fast Flux - Welivesecurity)\nThe simplest, \"single-flux\" method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.(Citation: Fast Flux - Welivesecurity)\nIn contrast, the \"double-flux\" method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.",
        "url": "https://attack.mitre.org/techniques/T1568/001",
        "detection": "In general, detecting usage of fast flux DNS is difficult due to web traffic load balancing that services client requests quickly. In single flux cases only IP addresses change for static domain names. In double flux cases, nothing is static. Defenders such as domain registrars and service providers are likely in the best position for detection.",
        "mitigations": []
      },
      {
        "tid": "T1568.002",
        "name": "Dynamic Resolution: Domain Generation Algorithms",
        "description": "Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)\nDGAs can take the form of apparently random or “gibberish” strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)\nAdversaries may use DGAs for the purpose of <a href=\"https://attack.mitre.org/techniques/T1008\">Fallback Channels</a>. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)",
        "url": "https://attack.mitre.org/techniques/T1568/002",
        "detection": "Detecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There is a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more.(Citation: Data Driven Security DGA) CDN domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, another more general approach for detecting a suspicious domain is to check for recently registered names or for rarely visited domains.\nMachine learning approaches to detecting DGA domains have been developed and have seen success in applications. One approach is to use N-Gram methods to determine a randomness score for strings used in the domain name. If the randomness score is high, and the domains are not whitelisted (CDN, etc), then it may be determined if a domain is related to a legitimate host or DGA.(Citation: Pace University Detecting DGA May 2017) Another approach is to use deep learning to classify domains as DGA-generated.(Citation: Elastic Predicting DGA)",
        "mitigations": [
          {
            "mid": "M1021",
            "name": "Restrict Web-Based Content",
            "description": "Restrict use of certain websites, block downloads/attachments, block Javascript, restrict browser extensions, etc.",
            "url": "https://attack.mitre.org/mitigations/M1021"
          },
          {
            "mid": "M1031",
            "name": "Network Intrusion Prevention",
            "description": "Use intrusion detection signatures to block traffic at network boundaries.",
            "url": "https://attack.mitre.org/mitigations/M1031"
          }
        ]
      },
      {
        "tid": "T1568.003",
        "name": "Dynamic Resolution: DNS Calculation",
        "description": "Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.(Citation: Meyers Numbered Panda)\nOne implementation of <a href=\"https://attack.mitre.org/techniques/T1568/003\">DNS Calculation</a> is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.(Citation: Meyers Numbered Panda)(Citation: Moran 2014)(Citation: Rapid7G20Espionage)",
        "url": "https://attack.mitre.org/techniques/T1568/003",
        "detection": "Detection for this technique is difficult because it would require knowledge of the specific implementation of the port calculation algorithm. Detection may be possible by analyzing DNS records if the algorithm is known.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 107,
    "tid": "T1057",
    "name": "Process Discovery",
    "description": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from <a href=\"https://attack.mitre.org/techniques/T1057\">Process Discovery</a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nIn Windows environments, adversaries could obtain details on running processes using the <a href=\"https://attack.mitre.org/software/S0057\">Tasklist</a> utility via <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> or Get-Process via <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>. Information about processes can also be extracted from the output of <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a> calls such as CreateToolhelp32Snapshot. In Mac and Linux, this is accomplished with the ps command. Adversaries may also opt to enumerate processes via /proc.",
    "url": "https://attack.mitre.org/techniques/T1057",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nNormal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.4606304028571429,
    "process_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 108,
    "tid": "T1485",
    "name": "Data Destruction",
    "description": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system file deletion commands such as del and rm often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from <a href=\"https://attack.mitre.org/techniques/T1561/001\">Disk Content Wipe</a> and <a href=\"https://attack.mitre.org/techniques/T1561/002\">Disk Structure Wipe</a> because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) In some cases politically oriented image files have been used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>, <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>, and <a href=\"https://attack.mitre.org/techniques/T1021/002\">SMB/Windows Admin Shares</a>.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer 2018).\nIn cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.(Citation: Data Destruction - Threat Post)(Citation: DOJ  - Cisco Insider)",
    "url": "https://attack.mitre.org/techniques/T1485",
    "detection": "Use process monitoring to monitor the execution and command-line parameters of binaries that could be involved in data destruction activity, such as <a href=\"https://attack.mitre.org/software/S0195\">SDelete</a>. Monitor for the creation of suspicious files as well as high unusual file modification activity. In particular, look for large quantities of file modifications in user directories and under C:\\Windows\\System32\\.\nIn cloud environments, the occurrence of anomalous high-volume deletion events, such as the DeleteDBCluster and DeleteGlobalCluster events in AWS, or a high quantity of data deletion events, such as DeleteBucket, within a short period of time may indicate suspicious activity.",
    "score": 0.450042306796174,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1053",
        "name": "Data Backup",
        "description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
        "url": "https://attack.mitre.org/mitigations/M1053"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 109,
    "tid": "T1092",
    "name": "Communication Through Removable Media",
    "description": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by <a href=\"https://attack.mitre.org/techniques/T1091\">Replication Through Removable Media</a>. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.",
    "url": "https://attack.mitre.org/techniques/T1092",
    "detection": "Monitor file access on removable media. Detect processes that execute when removable media is mounted.",
    "score": 0.44285714285714284,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1028",
        "name": "Operating System Configuration",
        "description": "Make configuration changes related to the operating system or a common feature of the operating system that result in system hardening against techniques.",
        "url": "https://attack.mitre.org/mitigations/M1028"
      },
      {
        "mid": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": "Remove or deny access to unnecessary and potentially vulnerable software to prevent abuse by adversaries.",
        "url": "https://attack.mitre.org/mitigations/M1042"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 110,
    "tid": "T1561",
    "name": "Disk Wipe",
    "description": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted.\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>, <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>, and <a href=\"https://attack.mitre.org/techniques/T1021/002\">SMB/Windows Admin Shares</a>.(Citation: Novetta Blockbuster Destructive Malware)",
    "url": "https://attack.mitre.org/techniques/T1561",
    "detection": "Look for attempts to read/write to sensitive locations like the partition boot sector, master boot record, disk partition table, or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the \\\\.\\ notation.(Citation: Microsoft Sysmon v6 May 2017) Monitor for unusual kernel driver installation activity.",
    "score": 0.42466122285714286,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1053",
        "name": "Data Backup",
        "description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
        "url": "https://attack.mitre.org/mitigations/M1053"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1561.001",
        "name": "Disk Wipe: Disk Content Wipe",
        "description": "Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)(Citation: DOJ Lazarus Sony 2018) Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.(Citation: Novetta Blockbuster Destructive Malware) Adversaries have been observed leveraging third-party drivers like <a href=\"https://attack.mitre.org/software/S0364\">RawDisk</a> to directly access disk content.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware) This behavior is distinct from <a href=\"https://attack.mitre.org/techniques/T1485\">Data Destruction</a> because sections of the disk are erased instead of individual files.\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>, <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>, and <a href=\"https://attack.mitre.org/techniques/T1021/002\">SMB/Windows Admin Shares</a>.(Citation: Novetta Blockbuster Destructive Malware)",
        "url": "https://attack.mitre.org/techniques/T1561/001",
        "detection": "Look for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock. Monitor for direct access read/write attempts using the \\\\.\\ notation.(Citation: Microsoft Sysmon v6 May 2017) Monitor for unusual kernel driver installation activity.",
        "mitigations": [
          {
            "mid": "M1053",
            "name": "Data Backup",
            "description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
            "url": "https://attack.mitre.org/mitigations/M1053"
          }
        ]
      },
      {
        "tid": "T1561.002",
        "name": "Disk Wipe: Disk Structure Wipe",
        "description": "Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. \nAdversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. <a href=\"https://attack.mitre.org/techniques/T1561/002\">Disk Structure Wipe</a> may be performed in isolation, or along with <a href=\"https://attack.mitre.org/techniques/T1561/001\">Disk Content Wipe</a> if all sectors of a disk are wiped.\nTo maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>, <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>, and <a href=\"https://attack.mitre.org/techniques/T1021/002\">SMB/Windows Admin Shares</a>.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)",
        "url": "https://attack.mitre.org/techniques/T1561/002",
        "detection": "Look for attempts to read/write to sensitive locations like the master boot record and the disk partition table. Monitor for direct access read/write attempts using the \\\\.\\ notation.(Citation: Microsoft Sysmon v6 May 2017) Monitor for unusual kernel driver installation activity.",
        "mitigations": [
          {
            "mid": "M1053",
            "name": "Data Backup",
            "description": "Take and store data backups from end user systems and critical servers. Ensure backup and storage systems are hardened and kept separate from the corporate network to prevent compromise.",
            "url": "https://attack.mitre.org/mitigations/M1053"
          }
        ]
      }
    ]
  },
  {
    "rank": 111,
    "tid": "T1499",
    "name": "Endpoint Denial of Service",
    "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\nAn Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\nTo perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets.\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\nBotnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)\nIn cases where traffic manipulation is used, there may be points in the the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers.(Citation: ArsTechnica Great Firewall of China)\nFor attacks attempting to saturate the providing network, see <a href=\"https://attack.mitre.org/techniques/T1498\">Network Denial of Service</a>.",
    "url": "https://attack.mitre.org/techniques/T1499",
    "detection": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.(Citation: Cisco DoSdetectNetflow) Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.\nIn addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.\nExternally monitor the availability of services that may be targeted by an Endpoint DoS.",
    "score": 0.4139285714285714,
    "cloud_score": 0.2,
    "mitigations": [
      {
        "mid": "M1037",
        "name": "Filter Network Traffic",
        "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
        "url": "https://attack.mitre.org/mitigations/M1037"
      }
    ],
    "subtechniques": [
      {
        "tid": "T1499.001",
        "name": "Endpoint Denial of Service: OS Exhaustion Flood",
        "description": "Adversaries may target the operating system (OS) for a DoS attack, since the (OS) is responsible for managing the finite resources on a system. These attacks do not need to exhaust the actual resources on a system since they can simply exhaust the limits that an OS self-imposes to prevent the entire system from being overwhelmed by excessive demands on its capacity.\nDifferent ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)\nACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)",
        "url": "https://attack.mitre.org/techniques/T1499/001",
        "detection": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.(Citation: Cisco DoSdetectNetflow) Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.",
        "mitigations": [
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      },
      {
        "tid": "T1499.002",
        "name": "Endpoint Denial of Service: Service Exhaustion Flood",
        "description": "Adversaries may target the different network services provided by systems to conduct a DoS. Adversaries often target DNS and web services, however others have been targeted as well.(Citation: Arbor AnnualDoSreport Jan 2018) Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.\nOne example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.(Citation: Cloudflare HTTPflood)\nAnother variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.(Citation: Arbor SSLDoS April 2012)",
        "url": "https://attack.mitre.org/techniques/T1499/002",
        "detection": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.(Citation: Cisco DoSdetectNetflow) Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.\nIn addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.\nExternally monitor the availability of services that may be targeted by an Endpoint DoS.",
        "mitigations": [
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      },
      {
        "tid": "T1499.003",
        "name": "Endpoint Denial of Service: Application Exhaustion Flood",
        "description": "Adversaries may target resource intensive features of web applications to cause a denial of service (DoS). Specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself. (Citation: Arbor AnnualDoSreport Jan 2018)",
        "url": "https://attack.mitre.org/techniques/T1499/003",
        "detection": "Detection of Endpoint DoS can sometimes be achieved before the effect is sufficient to cause significant impact to the availability of the service, but such response time typically requires very aggressive monitoring and responsiveness. Typical network throughput monitoring tools such as netflow, SNMP, and custom scripts can be used to detect sudden increases in circuit utilization.(Citation: Cisco DoSdetectNetflow) Real-time, automated, and qualitative study of the network traffic can identify a sudden surge in one type of protocol can be used to detect an attack as it starts.\nIn addition to network level detections, endpoint logging and instrumentation can be useful for detection. Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack, possibly before the impact is felt.",
        "mitigations": [
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      },
      {
        "tid": "T1499.004",
        "name": "Endpoint Denial of Service: Application or System Exploitation",
        "description": "Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent DoS condition.",
        "url": "https://attack.mitre.org/techniques/T1499/004",
        "detection": "Attacks targeting web applications may generate logs in the web server, application server, and/or database server that can be used to identify the type of attack. Externally monitor the availability of services that may be targeted by an Endpoint DoS.",
        "mitigations": [
          {
            "mid": "M1037",
            "name": "Filter Network Traffic",
            "description": "Use network appliances to filter ingress or egress traffic and perform protocol-based filtering. Configure software on endpoints to filter network traffic.",
            "url": "https://attack.mitre.org/mitigations/M1037"
          }
        ]
      }
    ]
  },
  {
    "rank": 112,
    "tid": "T1008",
    "name": "Fallback Channels",
    "description": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.",
    "url": "https://attack.mitre.org/techniques/T1008",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
    "score": 0.40476190476190477,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 113,
    "tid": "T1030",
    "name": "Data Transfer Size Limits",
    "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
    "url": "https://attack.mitre.org/techniques/T1030",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
    "score": 0.3952380952380953,
    "process_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 114,
    "tid": "T1029",
    "name": "Scheduled Transfer",
    "description": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability.\nWhen scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as <a href=\"https://attack.mitre.org/techniques/T1041\">Exfiltration Over C2 Channel</a> or <a href=\"https://attack.mitre.org/techniques/T1048\">Exfiltration Over Alternative Protocol</a>.",
    "url": "https://attack.mitre.org/techniques/T1029",
    "detection": "Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.",
    "score": 0.3904761904761905,
    "network_score": 0.2,
    "mitigations": [
      {
        "mid": "M1031",
        "name": "Network Intrusion Prevention",
        "description": "Use intrusion detection signatures to block traffic at network boundaries.",
        "url": "https://attack.mitre.org/mitigations/M1031"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 115,
    "tid": "T1016",
    "name": "System Network Configuration Discovery",
    "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include <a href=\"https://attack.mitre.org/software/S0099\">Arp</a>, <a href=\"https://attack.mitre.org/software/S0100\">ipconfig</a>/<a href=\"https://attack.mitre.org/software/S0101\">ifconfig</a>, <a href=\"https://attack.mitre.org/software/S0102\">nbtstat</a>, and <a href=\"https://attack.mitre.org/software/S0103\">route</a>.\nAdversaries may use the information from <a href=\"https://attack.mitre.org/techniques/T1016\">System Network Configuration Discovery</a> during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ",
    "url": "https://attack.mitre.org/techniques/T1016",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.",
    "score": 0.3721343876190476,
    "process_score": 0.2,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1016.001",
        "name": "System Network Configuration Discovery: Internet Connection Discovery",
        "description": "Adversaries may check for Internet connectivity on compromised systems. This may be performed during automated discovery and can be accomplished in numerous ways such as using <a href=\"https://attack.mitre.org/software/S0097\">Ping</a>, tracert, and GET requests to websites.\nAdversaries may use the results and responses from these requests to determine if the system is capable of communicating with their C2 servers before attempting to connect to them. The results may also be used to identify routes, redirectors, and proxy servers.",
        "url": "https://attack.mitre.org/techniques/T1016/001",
        "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Command and Control, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to check Internet connectivity.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 116,
    "tid": "T1115",
    "name": "Clipboard Data",
    "description": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. \nIn Windows, Applications can access clipboard data by using the Windows API.(Citation: MSDN Clipboard) OSX provides a native command, pbpaste, to grab clipboard contents.(Citation: Operating with EmPyre)",
    "url": "https://attack.mitre.org/techniques/T1115",
    "detection": "Access to the clipboard is a legitimate function of many applications on an operating system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.",
    "score": 0.30952380952380953,
    "network_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 117,
    "tid": "T1014",
    "name": "Rootkit",
    "description": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) \nRootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or <a href=\"https://attack.mitre.org/techniques/T1542/001\">System Firmware</a>. (Citation: Wikipedia Rootkit) Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)",
    "url": "https://attack.mitre.org/techniques/T1014",
    "detection": "Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR. (Citation: Wikipedia Rootkit)",
    "score": 0.30087447,
    "hardware_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 118,
    "tid": "T1217",
    "name": "Browser Bookmark Discovery",
    "description": "Adversaries may enumerate browser bookmarks to learn more about compromised hosts. Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure.\nBrowser bookmarks may also highlight additional targets after an adversary has access to valid credentials, especially <a href=\"https://attack.mitre.org/techniques/T1552/001\">Credentials In Files</a> associated with logins cached by a browser.\nSpecific storage locations vary based on platform and/or application, but browser bookmarks are typically stored in local files/databases.",
    "url": "https://attack.mitre.org/techniques/T1217",
    "detection": "Monitor processes and command-line arguments for actions that could be taken to gather browser bookmark information. Remote access tools with built-in features may interact directly using APIs to gather information. Information may also be acquired through system management tools such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a> and <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.\nSystem and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.",
    "score": 0.30000000000000004,
    "process_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 119,
    "tid": "T1529",
    "name": "System Shutdown/Reboot",
    "description": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer.(Citation: Microsoft Shutdown Oct 2017) Shutting down or rebooting systems may disrupt access to computer resources for legitimate users.\nAdversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as <a href=\"https://attack.mitre.org/techniques/T1561/002\">Disk Structure Wipe</a> or <a href=\"https://attack.mitre.org/techniques/T1490\">Inhibit System Recovery</a>, to hasten the intended effects on system availability.(Citation: Talos Nyetya June 2017)(Citation: Talos Olympic Destroyer 2018)",
    "url": "https://attack.mitre.org/techniques/T1529",
    "detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in shutting down or rebooting systems. Windows event logs may also designate activity associated with a shutdown/reboot, ex. Event ID 1074 and 6006.",
    "score": 0.2690476190476191,
    "hardware_score": 0.2,
    "mitigations": [],
    "subtechniques": []
  },
  {
    "rank": 120,
    "tid": "T1200",
    "name": "Hardware Additions",
    "description": "Adversaries may introduce computer accessories, computers, or networking hardware into a system or network that can be used as a vector to gain access. While public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping (Citation: Ossmann Star Feb 2011), network traffic modification (i.e. <a href=\"https://attack.mitre.org/techniques/T1557\">Adversary-in-the-Middle</a>) (Citation: Aleks Weapons Nov 2015), keystroke injection (Citation: Hak5 RubberDuck Dec 2016), kernel memory reading via DMA (Citation: Frisk DMA August 2016), addition of new wireless access to an existing network (Citation: McMillan Pwn March 2012), and others.",
    "url": "https://attack.mitre.org/techniques/T1200",
    "detection": "Asset management systems may help with the detection of computer systems or network devices that should not exist on a network. \nEndpoint sensors may be able to detect the addition of hardware via USB, Thunderbolt, and other external device communication ports.",
    "score": 0.26285879714285715,
    "mitigations": [
      {
        "mid": "M1034",
        "name": "Limit Hardware Installation",
        "description": "Block users or groups from installing or using unapproved hardware on systems, including USB devices.",
        "url": "https://attack.mitre.org/mitigations/M1034"
      },
      {
        "mid": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": "Prevent access to file shares, remote access to systems, unnecessary services. Mechanisms to limit access may include use of network concentrators, RDP gateways, etc.",
        "url": "https://attack.mitre.org/mitigations/M1035"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 121,
    "tid": "T1201",
    "name": "Password Policy Discovery",
    "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through <a href=\"https://attack.mitre.org/techniques/T1110\">Brute Force</a>. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\nPassword policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as net accounts (/domain), Get-ADDefaultDomainPasswordPolicy, chage -l <username>, cat /etc/pam.d/common-password, and pwpolicy getaccountpolicies (Citation: Superuser Linux Password Policies) (Citation: Jamf User Password Policies).\nPassword policies can be discovered in cloud environments using available APIs such as GetAccountPasswordPolicy in AWS (Citation: AWS GetPasswordPolicy).",
    "url": "https://attack.mitre.org/techniques/T1201",
    "detection": "Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.",
    "score": 0.21064284952380952,
    "mitigations": [
      {
        "mid": "M1027",
        "name": "Password Policies",
        "description": "Set and enforce secure password policies for accounts.",
        "url": "https://attack.mitre.org/mitigations/M1027"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 122,
    "tid": "T1611",
    "name": "Escape to Host",
    "description": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.(Citation: Docker Overview)\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host’s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host, or utilizing a privileged container to run commands on the underlying host.(Citation: Docker Bind Mounts)(Citation: Trend Micro Privileged Container)(Citation: Intezer Doki July 20) Adversaries may also escape via <a href=\"https://attack.mitre.org/techniques/T1068\">Exploitation for Privilege Escalation</a>, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.(Citation: Windows Server Containers Are Open)\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.",
    "url": "https://attack.mitre.org/techniques/T1611",
    "detection": "Monitor for the deployment of suspicious or unknown container images and pods in your environment, particularly containers running as root. Additionally, monitor for unexpected usage of syscalls such as mount (as well as resulting process activity) that may indicate an attempt to escape from a privileged container to host. In Kubernetes, monitor for cluster-level events associated with changing containers' volume configurations.",
    "score": 0.1,
    "mitigations": [
      {
        "mid": "M1026",
        "name": "Privileged Account Management",
        "description": "Manage the creation, modification, use, and permissions associated to privileged accounts, including SYSTEM and root.",
        "url": "https://attack.mitre.org/mitigations/M1026"
      },
      {
        "mid": "M1038",
        "name": "Execution Prevention",
        "description": "Block execution of code on a system through application control, and/or script blocking.",
        "url": "https://attack.mitre.org/mitigations/M1038"
      },
      {
        "mid": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": "Restrict execution of code to a virtual environment on or in transit to an endpoint system.",
        "url": "https://attack.mitre.org/mitigations/M1048"
      }
    ],
    "subtechniques": []
  },
  {
    "rank": 123,
    "tid": "T1614",
    "name": "System Location Discovery",
    "description": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from <a href=\"https://attack.mitre.org/techniques/T1614\">System Location Discovery</a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\nAdversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings.(Citation: FBI Ragnar Locker 2020)(Citation: Sophos Geolocation 2016)(Citation: Bleepingcomputer RAT malware 2020) Windows API functions such as GetLocaleInfoW can also be used to determine the locale of the host.(Citation: FBI Ragnar Locker 2020) In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance.(Citation: AWS Instance Identity Documents)(Citation: Microsoft Azure Instance Metadata 2021)\nAdversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services.(Citation: Securelist Trasparent Tribe 2020)(Citation: Sophos Geolocation 2016)",
    "url": "https://attack.mitre.org/techniques/T1614",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system location information. Remote access tools with built-in features may interact directly with the Windows API, such as calling  GetLocaleInfoW to gather information.(Citation: FBI Ragnar Locker 2020)\nMonitor traffic flows to geo-location service provider sites, such as ip-api and ipinfo.",
    "score": 0.1,
    "mitigations": [],
    "subtechniques": [
      {
        "tid": "T1614.001",
        "name": "System Location Discovery: System Language Discovery",
        "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.(Citation: Malware System Language Check)\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as <a href=\"https://attack.mitre.org/techniques/T1012\">Query Registry</a> and calls to <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a> functions.(Citation: CrowdStrike Ryuk January 2019) \nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language or parsing the outputs of Windows API functions GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID.(Citation: Darkside Ransomware Cybereason)(Citation: Securelist JSWorm)(Citation: SecureList SynAck Doppelgänging May 2018)\nOn a macOS or Linux system, adversaries may query locale to retrieve the value of the $LANG environment variable.",
        "url": "https://attack.mitre.org/techniques/T1614/001",
        "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system language information. This may include calls to various API functions and interaction with system configuration settings such as the Windows Registry.",
        "mitigations": []
      }
    ]
  },
  {
    "rank": 124,
    "tid": "T1620",
    "name": "Reflective Code Loading",
    "description": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL)\nReflective code injection is very similar to <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> except that the “injection” loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)",
    "url": "https://attack.mitre.org/techniques/T1620",
    "detection": "Monitor for code artifacts associated with reflectively loading code, such as the abuse of .NET functions such as Assembly.Load() and <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a> functions such as CreateThread(), memfd_create(), execve(), and/or execveat().(Citation: 00sec Droppers)(Citation: S1 Old Rat New Tricks)\nMonitor for artifacts of abnormal process execution. For example, a common signature related to reflective code loading on Windows is mechanisms related to the .NET Common Language Runtime (CLR) -- such as mscor.dll, mscoree.dll, and clr.dll -- loading into abnormal processes (such as notepad.exe). Similarly, AMSI / ETW traces can be used to identify signs of arbitrary code execution from within the memory of potentially compromised processes.(Citation: MDSec Detecting DOTNET)(Citation: Introducing Donut)\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ",
    "score": 0.1,
    "mitigations": [],
    "subtechniques": []
  }
]